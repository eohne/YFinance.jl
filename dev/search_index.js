var documenterSearchIndex = {"docs":
[{"location":"DataFramesetc/#Converting-To-Tables","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Converting To Tables","text":"","category":"section"},{"location":"DataFramesetc/#DataFrames-(DataFrames.jl)","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"DataFrames (DataFrames.jl)","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"The OrderedDicts can readily be converted to DataFrames by simply calling the DataFrames function on them.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using DataFrames\n\nprices = get_prices(\"AAPL\")\n\nDataFrame(prices)","category":"page"},{"location":"DataFramesetc/#Broadcasting-to-get-one-DataFrame-(stacked)","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Broadcasting to get one DataFrame (stacked)","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"tickers=[\"AAPL\",\"TSLA\",\"F\"]\nprices = get_prices.(tickers,startdt=\"2024-01-01\",enddt=\"2024-08-01\") |> (x-> DataFrame.(x)) |> (x->vcat(x...))","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"438×8 DataFrame\n Row │ ticker  timestamp            open      high      low       close    adjclose  vol       \n     │ String  DateTime             Float64   Float64   Float64   Float64  Float64   Float64\n─────┼─────────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2024-01-02T14:30:00  186.658   187.945   183.407    185.64  185.152   8.2272e7\n   2 │ AAPL    2024-01-03T14:30:00  183.736   185.392   182.948    184.25  183.766   5.8261e7\n   3 │ AAPL    2024-01-04T14:30:00  181.671   182.609   180.405    181.91  181.432   7.17945e7\n   4 │ AAPL    2024-01-05T14:30:00  181.512   182.28    179.697    181.18  180.704   6.21396e7\n  ⋮  │   ⋮              ⋮              ⋮         ⋮         ⋮         ⋮        ⋮          ⋮\n 436 │ F       2024-07-29T13:30:00   11.0085   11.0085   10.6344    11.01   10.8411  9.02616e7\n 437 │ F       2024-07-30T13:30:00   10.8608   10.9396   10.6147    10.84   10.6737  6.82735e7\n 438 │ F       2024-07-31T13:30:00   10.6934   10.8411   10.5556    10.82   10.654   7.43204e7\n                                                                               431 rows omitted","category":"page"},{"location":"DataFramesetc/#TimeArray-from-TimeSeries","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"TimeArray from TimeSeries","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"If you use Julia 1.9 or newer you can just use a sink argument in get_prices instead.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using TimeSeries, YFinance\nget_prices(TimeArray,\"AAPL\")","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"or alternatively","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using TimeSeries, YFinance\nprices = get_prices(\"AAPL\")\nsink_prices_to(TimeArray,prices)","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"If you use an older version you can run the below code:","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"The TimeArray takes a Vector with the timestamp, a matrix with the price data, column names, and some metadata.  ","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Below is a simple function showing how one may convert the dictionaries containing the price information into a TimeArray - this is most likely not the fastest or most elegant way.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using TimeSeries\n\nprices = get_prices(\"AAPL\")\n\nfunction stock_price_to_time_array(d)\n    coln = collect(keys(x))[3:end] # only get the keys that are not ticker or datetime\n    m = hcat([x[k] for k in coln]...) #Convert the dictionary into a matrix\n    return TimeArray(x[\"timestamp\"],m,Symbol.(coln),x[\"ticker\"])\nend\n\nstock_price_to_time_array(prices)","category":"page"},{"location":"DataFramesetc/#Broadcast-and-create-one-TimeArray-for-the-adjclose-prices","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Broadcast and create one TimeArray for the adjclose prices","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"tickers = [\"AAPL\",\"TSLA\",\"F\"]\nprices = get_prices.((TimeArray,),tickers)","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"3-element Vector{TimeArray{Float64, 2, DateTime, Matrix{Float64}}}:\n 5×6 TimeArray{Float64, 2, DateTime, Matrix{Float64}} 2024-08-01T13:30:00 to 2024-08-07T13:30:00\n 5×6 TimeArray{Float64, 2, DateTime, Matrix{Float64}} 2024-08-01T13:30:00 to 2024-08-07T13:30:00\n 5×6 TimeArray{Float64, 2, DateTime, Matrix{Float64}} 2024-08-01T13:30:00 to 2024-08-07T13:30:00","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Combine into one TimeArray:","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"prices=hcat(prices...)","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"5×18 TimeArray{Float64, 2, DateTime, Matrix{Float64}} 2024-08-01T13:30:00 to 2024-08-07T13:30:00\n┌─────────────────────┬────────┬────────┬────────┬────────┬──────────┬───────────┬────────┬────────┬────────┬─────────┬────────────┬───────────┬─────────┬─────────┬─────────┬─────────\n│                     │ open   │ high   │ low    │ close  │ adjclose │ vol       │ open_1 │ high_1 │ low_1  │ close_1 │ adjclose_1 │ vol_1     │ open_2  │ high_2  │ low_2   │ close_ ⋯\n├─────────────────────┼────────┼────────┼────────┼────────┼──────────┼───────────┼────────┼────────┼────────┼─────────┼────────────┼───────────┼─────────┼─────────┼─────────┼─────────\n│ 2024-08-01T13:30:00 │ 224.37 │ 224.48 │ 217.02 │ 218.36 │   218.36 │  6.2501e7 │ 227.69 │ 231.87 │ 214.33 │  216.86 │     216.86 │ 8.38619e7 │ 10.6934 │ 10.7525 │ 10.4473 │   10.6 ⋯\n│ 2024-08-02T13:30:00 │ 219.15 │  225.6 │ 217.71 │ 219.86 │   219.86 │ 1.05569e8 │ 214.88 │ 216.13 │ 205.78 │  207.67 │     207.67 │ 8.28801e7 │ 10.3882 │ 10.3882 │ 9.84663 │   10.0 ⋯\n│ 2024-08-05T13:30:00 │ 199.09 │  213.5 │  196.0 │ 209.27 │   209.27 │ 1.19549e8 │ 185.22 │ 203.88 │  182.0 │  198.88 │     198.88 │ 1.00309e8 │ 9.41338 │ 9.74816 │ 9.34445 │    9.7 ⋯\n│ 2024-08-06T13:30:00 │  205.3 │ 209.99 │ 201.07 │ 207.23 │   207.23 │ 6.96605e7 │ 200.75 │  202.9 │ 192.67 │  200.64 │     200.64 │ 7.37839e7 │ 9.63985 │ 9.70877 │ 9.53153 │    9.7 ⋯\n│ 2024-08-07T13:30:00 │  206.9 │ 213.64 │ 206.39 │ 209.82 │   209.82 │ 6.34023e7 │ 200.77 │ 203.49 │ 191.48 │  191.76 │     191.76 │ 7.07614e7 │    9.85 │    9.98 │    9.75 │    9.7 ⋯\n└─────────────────────┴────────┴────────┴────────┴────────┴──────────┴───────────┴────────┴────────┴────────┴─────────┴────────────┴───────────┴─────────┴─────────┴─────────┴─────────\n                                                                                                                                                                      3 columns omitted","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Get the relevant column names (all columns that are called adjclose)    ","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"cidx = colnames(prices)[occursin.(r\"adj\",string.(colnames(prices)))]","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"3-element Vector{Symbol}:\n :adjclose\n :adjclose_1\n :adjclose_2","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Select these columns","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"prices = prices[cidx]","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"5×3 TimeArray{Float64, 2, DateTime, Matrix{Float64}} 2024-08-01T13:30:00 to 2024-08-07T13:30:00\n┌─────────────────────┬──────────┬────────────┬────────────┐\n│                     │ adjclose │ adjclose_1 │ adjclose_2 │\n├─────────────────────┼──────────┼────────────┼────────────┤\n│ 2024-08-01T13:30:00 │   218.36 │     216.86 │     10.526 │\n│ 2024-08-02T13:30:00 │   219.86 │     207.67 │    9.87617 │\n│ 2024-08-05T13:30:00 │   209.27 │     198.88 │    9.56107 │\n│ 2024-08-06T13:30:00 │   207.23 │     200.64 │       9.63 │\n│ 2024-08-07T13:30:00 │   209.82 │     191.76 │       9.77 │\n└─────────────────────┴──────────┴────────────┴────────────┘","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Rename them back to the tickers:","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"TimeSeries.rename!(prices,Symbol.(tickers))","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"5×3 TimeArray{Float64, 2, DateTime, Matrix{Float64}} 2024-08-01T13:30:00 to 2024-08-07T13:30:00\n┌─────────────────────┬────────┬────────┬─────────┐\n│                     │ AAPL   │ TSLA   │ F       │\n├─────────────────────┼────────┼────────┼─────────┤\n│ 2024-08-01T13:30:00 │ 218.36 │ 216.86 │  10.526 │\n│ 2024-08-02T13:30:00 │ 219.86 │ 207.67 │ 9.87617 │\n│ 2024-08-05T13:30:00 │ 209.27 │ 198.88 │ 9.56107 │\n│ 2024-08-06T13:30:00 │ 207.23 │ 200.64 │    9.63 │\n│ 2024-08-07T13:30:00 │ 209.82 │ 191.76 │    9.77 │\n└─────────────────────┴────────┴────────┴─────────┘","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Or in one function:","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"function get_adj_close_TA(tickers,startdt,enddt,interval)\n    prices = get_prices.((TimeArray,),tickers,startdt=startdt,enddt=enddt,interval=interval) |> (x->hcat(x...))\n    prices = prices[colnames(prices)[occursin.(r\"adj\",string.(colnames(prices)))]]\n    TimeSeries.rename!(prices,Symbol.(tickers))\n    return prices\nend;\n\nget_adj_close_TA([\"AAPL\",\"TSLA\",\"F\",\"AMD\",\"NFLX\",\"WBA\"],Date(2023-01-01),Date(2024-01-01),\"1d\")","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"252×6 TimeArray{Float64, 2, DateTime, Matrix{Float64}} 2021-01-04T14:30:00 to 2021-12-31T14:30:00\n┌─────────────────────┬─────────┬─────────┬─────────┬────────┬────────┬─────────┐\n│                     │ AAPL    │ TSLA    │ F       │ AMD    │ NFLX   │ WBA     │\n├─────────────────────┼─────────┼─────────┼─────────┼────────┼────────┼─────────┤\n│ 2021-01-04T14:30:00 │  126.83 │ 243.257 │ 7.03792 │   92.3 │ 522.86 │ 34.6737 │\n│ 2021-01-05T14:30:00 │ 128.398 │ 245.037 │  7.1453 │  92.77 │  520.8 │ 34.4727 │\n│ 2021-01-06T14:30:00 │ 124.076 │ 251.993 │ 7.30225 │  90.33 │ 500.49 │ 36.0389 │\n│ 2021-01-07T14:30:00 │  128.31 │ 272.013 │ 7.48398 │  95.16 │ 508.89 │ 37.9066 │\n│          ⋮          │    ⋮    │    ⋮    │    ⋮    │   ⋮    │   ⋮    │    ⋮    │\n│ 2021-12-29T14:30:00 │ 176.888 │ 362.063 │  17.069 │ 148.26 │ 610.54 │ 45.4322 │\n│ 2021-12-30T14:30:00 │ 175.724 │  356.78 │ 16.9943 │ 145.15 │ 612.09 │ 45.2061 │\n│ 2021-12-31T14:30:00 │ 175.103 │  352.26 │ 17.2434 │  143.9 │ 602.44 │ 45.3539 │\n└─────────────────────┴─────────┴─────────┴─────────┴────────┴────────┴─────────┘\n                                                                 245 rows omitted","category":"page"},{"location":"DataFramesetc/#TSFrame-from-TSFrames.jl","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"TSFrame from TSFrames.jl","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"If you use Julia 1.9 or newer you can just use a sink argument in get_prices instead.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using TSFrames, YFinance\nget_prices(TSFrame,\"AAPL\")","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"or alternatively","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using TSFrames, YFinance\nprices = get_prices(\"AAPL\")\nsink_prices_to(TSFrame,prices)","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"If you use an older version you can run the below code:","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"The TSFrame takes a matrix, a DateTime index, and a Vector of column names as arguments.  ","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Below is an example of a function converting the price data to a TSFrame - this is most likely not the fastest or most elegant way.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using TSFrames\n\nprices = get_prices(\"AAPL\")\n\nfunction stock_price_to_TSFrames(x)\n    coln = collect(keys(x))[3:end] # only get the keys that are not ticker or datetime\n    m = hcat([x[k] for k in coln]...) #Convert the dictionary into a matrix\n    tsf = TSFrame(m,x[\"timestamp\"],colnames = Symbol.(coln)) # create the timeseries array\n    return tsf\nend\n\nstock_price_to_TSFrames(prices)","category":"page"},{"location":"DataFramesetc/#Broadcast-and-create-one-TSFrame-for-the-adjclose-prices","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Broadcast and create one TSFrame for the adjclose prices","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"tickers = [\"AAPL\",\"TSLA\",\"F\"]\nprices = get_prices.((TSFrame,),tickers);","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"We now want to combine them by taking the adjclose of each tsframe.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"prices = join(getindex.(prices,:,([:Index,:adjclose],))...)","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"5×3 TSFrame with DateTime Index\n Index                adjclose  adjclose_1  adjclose_2 \n DateTime             Float64?  Float64?    Float64?\n───────────────────────────────────────────────────────\n 2024-08-01T13:30:00    218.36      216.86    10.526\n 2024-08-02T13:30:00    219.86      207.67     9.87617\n 2024-08-05T13:30:00    209.27      198.88     9.56107\n 2024-08-06T13:30:00    207.23      200.64     9.63\n 2024-08-07T13:30:00    209.82      191.76     9.77","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Rename:","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"TSFrames.rename!(prices, tickers)","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"5×3 TSFrame with DateTime Index\n Index                AAPL      TSLA      F        \n DateTime             Float64?  Float64?  Float64?\n───────────────────────────────────────────────────\n 2024-08-01T13:30:00    218.36    216.86  10.526\n 2024-08-02T13:30:00    219.86    207.67   9.87617\n 2024-08-05T13:30:00    209.27    198.88   9.56107\n 2024-08-06T13:30:00    207.23    200.64   9.63\n 2024-08-07T13:30:00    209.82    191.76   9.77","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Or in one function:","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"\nfunction get_adj_close_TSF(tickers,startdt,enddt,interval)\n    prices = get_prices.((TSFrame,),tickers,startdt=startdt,enddt=enddt,interval=interval)\n    prices = join(getindex.(prices,:,([:Index,:adjclose],))...)\n    TSFrames.rename!(prices, tickers)\n    return prices    \nend;\nget_adj_close_TSF([\"AAPL\",\"TSLA\",\"F\",\"AMD\",\"NFLX\",\"WBA\"],Date(2023-01-01),Date(2024-01-01),\"1d\")","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"252×6 TSFrame with DateTime Index\n Index                AAPL      TSLA      F         AMD       NFLX      WBA      \n DateTime             Float64?  Float64?  Float64?  Float64?  Float64?  Float64?\n─────────────────────────────────────────────────────────────────────────────────\n 2021-01-04T14:30:00   126.83    243.257   7.03792     92.3     522.86   34.6737\n 2021-01-05T14:30:00   128.398   245.037   7.1453      92.77    520.8    34.4727\n 2021-01-06T14:30:00   124.076   251.993   7.30225     90.33    500.49   36.0389\n 2021-01-07T14:30:00   128.31    272.013   7.48398     95.16    508.89   37.9066\n          ⋮              ⋮         ⋮         ⋮         ⋮         ⋮         ⋮\n 2021-12-29T14:30:00   176.888   362.063  17.069      148.26    610.54   45.4322\n 2021-12-30T14:30:00   175.724   356.78   16.9943     145.15    612.09   45.2061\n 2021-12-31T14:30:00   175.103   352.26   17.2434     143.9     602.44   45.3539\n                                                                 245 rows omitted","category":"page"},{"location":"Plotting_Example/#Plotting-Some-Data","page":"Plotting Data","title":"Plotting Some Data","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"This section gives some examples on how to create plots for a few data items - quite a lot of data that is available is not covered here.","category":"page"},{"location":"Plotting_Example/#Packages-Used","page":"Plotting Data","title":"Packages Used","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"DataFrames.jl for easier data handling\nTimeSeries.jl To show interoperability with TimeArray \nTSFrames.jl To show interoperability with TSFrame\nDates.jl because we need dates \nPlots.jl\nStatsPlots.jl","category":"page"},{"location":"Plotting_Example/#Load-the-packages:","page":"Plotting Data","title":"Load the packages:","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"using YFinance\nusing DataFrames, Dates, Plots, StatsPlots","category":"page"},{"location":"Plotting_Example/#Retriev-price-information-for-AAPL","page":"Plotting Data","title":"Retriev price information for AAPL","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"Here we use intraday price information.","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"AAPL = get_prices(\"AAPL\",interval = \"1m\",range=\"1d\")","category":"page"},{"location":"Plotting_Example/#OHLC-Plot-(Intraday)","page":"Plotting Data","title":"OHLC Plot (Intraday)","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"Here we can use the TimeSeries package. One can instead also just use the data from the dictionary, or sink into a DataFrame or a TSFrame","category":"page"},{"location":"Plotting_Example/#The-Plot:","page":"Plotting Data","title":"The Plot:","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"Plotting the first 25 values.","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"plot( sink_prices_to(TimeArray,AAPL)[1:25] , seriestype = :candlestick)\n# Alternative call:\nplot(get_prices(TimeArray,\"AAPL\",interval = \"1m\",range=\"1d\")[1:25] , seriestype = :candlestick)","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"(Image: OHCL Plot)","category":"page"},{"location":"Plotting_Example/#Plot-Multiple-Items","page":"Plotting Data","title":"Plot Multiple Items","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"For illustration I used Apple (AAPL), the S&P500 (^GSPC), and the NASDAQ (^IXIC) for this. To show the interoparability with TSFrames.jl we will sink to TSFrame in this example","category":"page"},{"location":"Plotting_Example/#Download-Data-as-a-TSFrame","page":"Plotting Data","title":"Download Data as a TSFrame","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"# Lets use TSFrames now for this example.\n\ntickers = [\"AAPL\",\"^GSPC\", \"^IXIC\"];\n# Broadcast and sink into a TSFrame\nprices =  get_prices.((TSFrame,),tickers,interval=\"1d\",range=\"2y\")\n# get rid of the ^ in the tickers\ntickers = replace.(tickers,\"^\"=>\"\");\n\n# Get only the adjusted close and time index and join the data into one TSFrame\nprices = join(getindex.(prices,:,([:Index,:adjclose],))...)\n# we want to rename the adjclose to the tickers\nTSFrames.rename!(prices, tickers)","category":"page"},{"location":"Plotting_Example/#Comparsion-Plot-raw-prices","page":"Plotting Data","title":"Comparsion Plot - raw prices","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"# Let's compare how the stocks have performed over time:\n# Creates a comparison plot of the price for all items\nplot(prices)","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"(Image: Raw Comp)","category":"page"},{"location":"Plotting_Example/#Comparison-Plot-Wealth-Index","page":"Plotting Data","title":"Comparison Plot - Wealth Index","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"For better comparison we first calculate returns and afterwards a wealth index then plot that.","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"# First caluclate log returns.\nprices = diff(log.(prices))\n\n# next add a zero to the first missing value so the index starts at 1.\nfor t in tickers\n    getproperty(prices, Symbol(t*\"_log\"))[begin] = 0.0\nend\n\n# we now need to cumulate these to get a wealth index.\nfor t in tickers\n    getproperty(prices, Symbol(t*\"_log\"))[begin:end] = cumsum(getproperty(prices, Symbol(t*\"_log\"))[begin:end])\nend\n\n# Take the exponent again to go back to \"normal returns\"\nprices = exp.(prices)\nTSFrames.rename!(prices,tickers) # rename back to the old names without \"_log\" attached.\nplot(prices)","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"(Image: Wealth Index Comp)","category":"page"},{"location":"Plotting_Example/#Get-Fundamental-Data-Example-Income-Statement","page":"Plotting Data","title":"Get Fundamental Data - Example Income Statement","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"# Download and store in a DataFrame\nis_apple = get_Fundamental(\"AAPL\",\"income_statement\",\"annual\",\"2020-01-01\",\"2024-12-31\") |> DataFrame\n# Calculate Profit Margin etc at different levels\nis_apple.ProfitM = is_apple.NetIncome./is_apple.TotalRevenue;\nis_apple.OperIncM = is_apple.OperatingIncome./is_apple.TotalRevenue;\nis_apple.GrossProfitM = is_apple.GrossProfit./is_apple.TotalRevenue;\n\n# Plot:\nplot(is_apple.timestamp, is_apple.GrossProfitM,label = names(is_apple)[2], seriestype = :bar, legend=true)\nplot!(is_apple.timestamp, is_apple.OperIncM,label = names(is_apple)[3], seriestype = :bar)\nplot!(is_apple.timestamp, is_apple.ProfitM,label = names(is_apple)[4], seriestype = :bar)","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"(Image: Profit Margin Over Time)","category":"page"},{"location":"Plotting_Example/#ESG-Data-Bar-Chart","page":"Plotting Data","title":"ESG Data Bar Chart","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"Bar Chart comparing ESG scores between AAPL and its peers","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"Download ESG data and convert to a DataFrame and reshape to long format for easier plotting","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"esg = get_ESG(\"AAPL\")\nesg = vcat([DataFrame(i) for i in values(esg)]...) #convert to DataFrame\nsubset!(esg, :timestamp => x -> isequal.(x,maximum(x))) # take only the newest values\nesg = DataFrames.stack(esg,[:esgScore,:environmentScore,:governanceScore,:socialScore]) #reshape into long format\nusing StatsPlots\ngroupedbar(esg.variable, esg.value, group = esg.symbol, ylabel = \"Scores\")","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"(Image: ESG Bar Chart)","category":"page"},{"location":"Plotting_Example/#Pie-Chart-of-the-major-Holders","page":"Plotting Data","title":"Pie Chart of the major Holders","text":"","category":"section"},{"location":"Plotting_Example/#Downloading-the-Data","page":"Plotting Data","title":"Downloading the Data","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"major_holders  = get_major_holders_breakdown(\"AAPL\") |> DataFrame","category":"page"},{"location":"Plotting_Example/#Creating-the-Pie-Chart","page":"Plotting Data","title":"Creating the Pie Chart","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"#select the relevant fields:\nselect!(major_holders, r\"insiders|institutionsP\");\n# Calculate the left over part\nmajor_holders.Rest .= 1-sum(major_holders[1,1:2]) \n# reshape to long\nmajor_holders=stack(major_holders); \npie(major_holders.variable,major_holders.value)","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data","title":"Plotting Data","text":"(Image: Major Holders Pie Chart)","category":"page"},{"location":"div_split/#Download-Dividend-and-Stock-Split-Data","page":"Dividends & Splits","title":"Download Dividend and Stock Split Data","text":"","category":"section"},{"location":"div_split/","page":"Dividends & Splits","title":"Dividends & Splits","text":"get_dividends\n\nget_splits","category":"page"},{"location":"div_split/#YFinance.get_dividends","page":"Dividends & Splits","title":"YFinance.get_dividends","text":"get_dividends(symbol::String; startdt::Union{Date,DateTime,AbstractString}=\"\", enddt::Union{Date,DateTime,AbstractString}=\"\", timeout::Int=10, throw_error::Bool=false, exchange_local_time::Bool=false)\n\nRetrieves dividend data from Yahoo Finance.\n\nArguments\n\nsymbol: A ticker (e.g., AAPL for Apple Inc., or ^GSPC for the S&P 500)\nstartdt and enddt: Optional. Can be of type Date, DateTime, or a String in the format \"yyyy-mm-dd\". If not provided, startdt defaults to the earliest available data and enddt to the current date.\ntimeout: Integer, defaults to 10. The timeout for the HTTP request in seconds.\nthrow_error: Boolean, defaults to false. If set to true, the function raises an error when the ticker is not valid or other issues occur. If false, a warning is given and an empty OrderedDict is returned.\nexchange_local_time: Boolean, defaults to false. If set to true, the timestamp corresponds to the exchange local time; otherwise, it's in GMT.\n\nReturns\n\nAn OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} containing the following keys:\n\nticker\ntimestamp\ndiv\n\nExamples\n\njulia> get_dividends(\"AAPL\", startdt = \"2021-01-01\", enddt=\"2022-01-01\")\nOrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} with 3 entries:\n  \"ticker\"    => \"AAPL\"\n  \"timestamp\" => [DateTime(\"2021-02-05T14:30:00\"), DateTime(\"2021-05-07T13:30:00\"), DateTime(\"2021-08-06T13:30:00\"), DateTime(\"2021-11-05T13:30:00\")]\n  \"div\"       => [0.205, 0.22, 0.22, 0.22]\n\n## Can be easily converted to a DataFrame\njulia> using DataFrames\njulia> get_dividends(\"AAPL\", startdt = \"2021-01-01\", enddt=\"2022-01-01\") |> DataFrame\n4×3 DataFrame\n Row │ ticker  timestamp            div     \n     │ String  DateTime             Float64 \n─────┼───────────────────────────────────────\n   1 │ AAPL    2021-02-05T14:30:00    0.205\n   2 │ AAPL    2021-05-07T13:30:00    0.22\n   3 │ AAPL    2021-08-06T13:30:00    0.22\n   4 │ AAPL    2021-11-05T13:30:00    0.22\n\n## Broadcasting\njulia> get_dividends.([\"AAPL\", \"F\"], startdt = \"2021-01-01\", enddt=\"2022-01-01\")\n2-element Vector{OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}}}:\n OrderedDict(\"ticker\" => \"AAPL\", \"timestamp\" => [DateTime(\"2021-02-05T14:30:00\"), DateTime(\"2021-05-07T13:30:00\"), DateTime(\"2021-08-06T13:30:00\"), DateTime(\"2021-11-05T13:30:00\")], \"div\" => [0.205, 0.22, 0.22, 0.22])\n OrderedDict(\"ticker\" => \"F\", \"timestamp\" => [DateTime(\"2021-11-18T14:30:00\")], \"div\" => [0.1])\n\n## Converting it to a DataFrame:\njulia> using DataFrames\njulia> data = get_dividends.([\"AAPL\", \"F\"], startdt = \"2021-01-01\", enddt=\"2022-01-01\");\n\njulia> vcat([DataFrame(i) for i in data]...)\n5×3 DataFrame\n Row │ ticker  timestamp            div     \n     │ String  DateTime             Float64 \n─────┼───────────────────────────────────────\n   1 │ AAPL    2021-02-05T14:30:00    0.205\n   2 │ AAPL    2021-05-07T13:30:00    0.22\n   3 │ AAPL    2021-08-06T13:30:00    0.22\n   4 │ AAPL    2021-11-05T13:30:00    0.22\n   5 │ F       2021-11-18T14:30:00    0.1\n\n\n\n\n\n","category":"function"},{"location":"div_split/#YFinance.get_splits","page":"Dividends & Splits","title":"YFinance.get_splits","text":"get_splits(symbol::String; startdt::Union{Date,DateTime,AbstractString}=\"\", enddt::Union{Date,DateTime,AbstractString}=\"\", timeout::Int=10, throw_error::Bool=false, exchange_local_time::Bool=false)\n\nRetrieves stock split data from Yahoo Finance.\n\nArguments\n\nsymbol: A ticker (e.g., AAPL for Apple Inc., or ^GSPC for the S&P 500)\nstartdt and enddt: Optional. Can be of type Date, DateTime, or a String in the format \"yyyy-mm-dd\". If not provided, startdt defaults to the earliest available data and enddt to the current date.\ntimeout: Integer, defaults to 10. The timeout for the HTTP request in seconds.\nthrow_error: Boolean, defaults to false. If set to true, the function raises an error when the ticker is not valid or other issues occur. If false, a warning is given and an empty OrderedDict is returned.\nexchange_local_time: Boolean, defaults to false. If set to true, the timestamp corresponds to the exchange local time; otherwise, it's in GMT.\n\nReturns\n\nAn OrderedDict{String, Union{String,Vector{DateTime},Vector{Int},Vector{Float64}}} containing the requested split data.\n\nExamples\n\njulia> get_splits(\"AAPL\", startdt = \"2000-01-01\", enddt = \"2020-01-01\")\nOrderedDict{String, Union{String,Vector{DateTime},Vector{Int},Vector{Float64}}} with 5 entries:\n  \"ticker\"      => \"AAPL\"\n  \"timestamp\"   => [DateTime(\"2000-06-21T13:30:00\"), DateTime(\"2005-02-28T14:30:00\"), DateTime(\"2014-06-09T13:30:00\")]\n  \"numerator\"   => [2, 2, 7]\n  \"denominator\" => [1, 1, 1]\n  \"ratio\"       => [2.0, 2.0, 7.0]\n\n## Can be easily converted to a DataFrame\njulia> using DataFrames\njulia> get_splits(\"AAPL\", startdt = \"2000-01-01\", enddt = \"2020-01-01\") |> DataFrame\n3×5 DataFrame\n Row │ ticker  timestamp            numerator  denominator  ratio   \n     │ String  DateTime             Int64      Int64        Float64 \n─────┼──────────────────────────────────────────────────────────────\n   1 │ AAPL    2000-06-21T13:30:00          2            1      2.0\n   2 │ AAPL    2005-02-28T14:30:00          2            1      2.0\n   3 │ AAPL    2014-06-09T13:30:00          7            1      7.0\n\n## Broadcasting\njulia> get_splits.([\"AAPL\", \"F\"], startdt = \"2000-01-01\", enddt = \"2020-01-01\")\n2-element Vector{OrderedDict{String, Union{String,Vector{DateTime},Vector{Int},Vector{Float64}}}}:\n OrderedDict(\"ticker\" => \"AAPL\", \"timestamp\" => [DateTime(\"2000-06-21T13:30:00\"), DateTime(\"2005-02-28T14:30:00\"), DateTime(\"2014-06-09T13:30:00\")], \"numerator\" => [2, 2, 7], \"denominator\" => [1, 1, 1], \"ratio\" => [2.0, 2.0, 7.0])\n OrderedDict(\"ticker\" => \"F\", \"timestamp\" => [DateTime(\"2000-06-29T13:30:00\"), DateTime(\"2000-08-03T13:30:00\")], \"numerator\" => [10000, 1748175], \"denominator\" => [9607, 1000000], \"ratio\" => [1.0409076714895389, 1.748175])\n\n## Converting it to a DataFrame:\njulia> using DataFrames\njulia> data = get_splits.([\"AAPL\", \"F\"], startdt = \"2000-01-01\", enddt = \"2020-01-01\");\n\njulia> vcat([DataFrame(i) for i in data]...)\n5×5 DataFrame\n Row │ ticker  timestamp            numerator  denominator  ratio   \n     │ String  DateTime             Int64      Int64        Float64 \n─────┼──────────────────────────────────────────────────────────────\n   1 │ AAPL    2000-06-21T13:30:00          2            1  2.0\n   2 │ AAPL    2005-02-28T14:30:00          2            1  2.0\n   3 │ AAPL    2014-06-09T13:30:00          7            1  7.0\n   4 │ F       2000-06-29T13:30:00      10000         9607  1.04091\n   5 │ F       2000-08-03T13:30:00    1748175      1000000  1.74818\n\n\n\n\n\n","category":"function"},{"location":"Options/#Download-Options-Data","page":"Options","title":"Download Options Data","text":"","category":"section"},{"location":"Options/","page":"Options","title":"Options","text":"get_Options","category":"page"},{"location":"Options/#YFinance.get_Options","page":"Options","title":"YFinance.get_Options","text":"get_Options(symbol::String)\n\nRetrievs options data from Yahoo Finance stored in a OrderedCollections.OrderedDict with two items. One contains Call options the other Put options. These subitems are OrderedCollections.OrderedDict themselves. The call and put options OrderedCollections.OrderedDict can readily be transformed to a DataFrame.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_Options(\"AAPL\")\nOrderedDict{String, OrderedDict{String, Vector{Any}}} with 2 entries:\n  \"calls\" => OrderedDict(\"contractSymbol\"=>[\"AAPL221230C00050000\", \"AAPL221230C00055000\",…\n  \"puts\"  => OrderedDict(\"contractSymbol\"=>[\"AAPL221230P00050000\", \"AAPL221230P00055000\",…\n\njulia> using DataFrames\njulia> get_Options(\"AAPL\")[\"calls\"] |> DataFrame\n72×16 DataFrame\n Row │ contractSymbol       strike  currency  lastPrice  change  percentChange  volume   ⋯\n     │ Any                  Any     Any       Any        Any     Any            Any      ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL221230C00050000  50      USD       79.85      0       0              1        ⋯\n   2 │ AAPL221230C00055000  55      USD       72.85      0       0              1\n   3 │ AAPL221230C00060000  60      USD       66.4       0       0              19        \n  ⋮  │          ⋮             ⋮        ⋮          ⋮        ⋮           ⋮           ⋮     ⋱\n  71 │ AAPL221230C00230000  230     USD       0.02       0       0              missing   \n  72 │ AAPL221230C00250000  250     USD       0.01       0       0              2        ⋯\n                                                             9 columns and 67 rows omitted\n\njulia> using DataFrames\njulia> data  = get_Options(\"AAPL\");\njulia> vcat( [DataFrame(i) for i in values(data)]...)\n141×16 DataFrame\n Row │ contractSymbol       strike  currency  lastPrice  change  percentChange  volume   ⋯\n     │ Any                  Any     Any       Any        Any     Any            Any      ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL221230C00050000  50      USD       79.85      0       0              1        ⋯\n   2 │ AAPL221230C00055000  55      USD       72.85      0       0              1\n   3 │ AAPL221230C00060000  60      USD       66.4       0       0              19        \n  ⋮  │          ⋮             ⋮        ⋮          ⋮        ⋮           ⋮          ⋮      ⋱\n 140 │ AAPL221230P00225000  225     USD       94.65      0       0              1\n 141 │ AAPL221230P00230000  230     USD       99.65      0       0              1        ⋯\n                                                            9 columns and 136 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"Search Symbols/#Search-for-Yahoo-Finance-Symbols","page":"Search for Symbol","title":"Search for Yahoo Finance Symbols","text":"","category":"section"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"This package currently provides two ways to get tickers.","category":"page"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"you know the company/security name but are unsure about the ticker use get_symbols()\nyou simply want all tickers listed on the NASDAQ, AMEX, or NYSE use get_all_symbols()","category":"page"},{"location":"Search Symbols/#Structs","page":"Search for Symbol","title":"Structs","text":"","category":"section"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"The Items returned by get_symbols","category":"page"},{"location":"Search Symbols/#YahooSearch","page":"Search for Symbol","title":"YahooSearch","text":"","category":"section"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"Basically is a custom Array of YahooSearchItems returned by get_symbols.","category":"page"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"mutable struct YahooSearch{YahooSearchItem,N} <: AbstractArray{YahooSearchItem,N}\n   arr::Array{YahooSearchItem,N}\nend","category":"page"},{"location":"Search Symbols/#YahooSearchItem","page":"Search for Symbol","title":"YahooSearchItem","text":"","category":"section"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"This is an individual search item in YahooSearch. It contains the following fields:","category":"page"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"symbol: The Symbol (Ticker)\nshortname: The short name of the instrument/company\nquoteType: The type of asset (e.g. EQUITY)\nsector: The Sector (only if quotetype==EQUITY, otherwise \"\")\nindustry: The Industry (only if quotetype==EQUITY, otherwise \"\")","category":"page"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"mutable struct YahooSearchItem\n   symbol::String\n   shortname::String\n   exchange::String\n   quoteType::String\n   sector::String\n   industry::String\nend","category":"page"},{"location":"Search Symbols/#Search-Functions","page":"Search for Symbol","title":"Search Functions","text":"","category":"section"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"get_symbols\nget_all_symbols","category":"page"},{"location":"Search Symbols/#YFinance.get_symbols","page":"Search for Symbol","title":"YFinance.get_symbols","text":"get_symbols(search_term::String)\n\nAllows searches for specific securities.\n\nArguments\n\nsearch_term::String: Typically a company/security name (e.g. microsoft)\n\nReturns\n\nA YahooSearch <: AbstractArray containing YahooSearchItems containing the following fields: symbol::String, shortname::String, exchange::String, quoteType::String, sector::String, industry::String\n\nExample\n\njulia> get_symbols(\"micro\")\n7-element YahooSearch{YahooSearchItem, 1}:\n \nSymbol:  MGC=F\nName:    Micro Gold Futures,Jun-2023\nType:    FUTURE\nExch.:   New York Commodity Exchange (CMX)\n\n\nSymbol:  MSFT\nName:    Microsoft Corporation\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Software—Infrastructure\n\n\nSymbol:  AMD\nName:    Advanced Micro Devices, Inc.\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Semiconductors\n\n\nSymbol:  MU\nName:    Micron Technology, Inc.\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Semiconductors\n\n\nSymbol:  MSTR\nName:    MicroStrategy Incorporated\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Software—Application\n\n\nSymbol:  SMCI\nName:    Super Micro Computer, Inc.\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Computer Hardware\n\n\nSymbol:  FNGU\nName:    MicroSectors FANG  Index 3X Lev\nType:    ETF\nExch.:   NYSEArca (PCX)\n\n\n\n\n\n","category":"function"},{"location":"Search Symbols/#YFinance.get_all_symbols","page":"Search for Symbol","title":"YFinance.get_all_symbols","text":"get_all_symbols(market::T)::Vector{T} where {T<:String}\n\nFetch all the symbols from a given market.\n\nArguments\n\nmarket::String: The market to fetch the symbols from.\n\nCurrently supported markets are:\n\nAMEX\nNASDAQ\nNYSE  \n\nUses dumbstockapi.com\n\nReturns\n\nVector{String}: A vector of strings containing the symbols.\n\nExample\n\njulia> get_all_symbols(\"NYSE\")\n3127-element Vector{String}:\n \"A\"\n \"AA\"\n \"AAC\"\n \"AAN\"\n ⋮\n \"ZTR\"\n \"ZTS\"\n \"ZUO\"\n \"ZYME\"\n\n\n\n\n\n","category":"function"},{"location":"ESG/#Download-ESG-Data","page":"ESG","title":"Download ESG Data","text":"","category":"section"},{"location":"ESG/","page":"ESG","title":"ESG","text":"get_ESG","category":"page"},{"location":"ESG/#YFinance.get_ESG","page":"ESG","title":"YFinance.get_ESG","text":"get_ESG(symbol::String)\n\nRetrievs ESG Scores from Yahoo Finance stored in a OrderedCollections.OrderedDict with two items. One, score, contains the companies ESG scores and individal Overall, Environment, Social and  Goverance Scores as well as a timestamp of type DateTime. The other,  peer_score, contains the peer group's scores. The subdictionaries can be transformed to DataFrames\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_ESG(\"AAPL\")\nOrderedDict{String, OrderedDict{String, Any}} with 2 entries:\n  \"score\"      => OrderedDict(\"symbol\"=>\"AAPL\", \"timestamp\"=>[DateTime(\"2014-09-01T00:00:…\n  \"peer_score\" => OrderedDict(\"symbol\"=>\"Technology Hardware\", \"timestamp\"=>[DateTime(\"20…\n\njulia> using DataFrames\njulia> get_ESG(\"AAPL\")[\"score\"] |> DataFrame\n96×6 DataFrame\n Row │ symbol  timestamp            esgScore    governanceScore  environmentScore  socialScore \n     │ String  DateTime             Real?       Real?            Real?             Real?       \n─────┼─────────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2014-09-01T00:00:00       61               62                74           45\n   2 │ AAPL    2014-10-01T00:00:00       60               62                74           45\n   3 │ AAPL    2014-11-01T00:00:00       61               62                74           45\n  ⋮  │   ⋮              ⋮               ⋮              ⋮                ⋮               ⋮\n  95 │ AAPL    2022-07-01T00:00:00  missing          missing           missing      missing    \n  96 │ AAPL    2022-08-01T00:00:00       16.68             9.18              0.65         6.86\n                                                                                91 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"Prices/#Download-Price-Data","page":"Prices","title":"Download Price Data","text":"","category":"section"},{"location":"Prices/","page":"Prices","title":"Prices","text":"This function returns open, high, low, close, and adjusted close prices as well as volume.  ","category":"page"},{"location":"Prices/","page":"Prices","title":"Prices","text":"For a few stocks yahoo finance will return nothing for specific timestamps in the price series.  ","category":"page"},{"location":"Prices/","page":"Prices","title":"Prices","text":"For performance reasons and easier integration with TimeSeries.jl these nothing values are returned as NaNs. Some other packages like python's yahooquery do not return these datapoints at all. We decided to return them to indicate a break in the series and to indicate that Yahoo Finance thinks it should have price information for the specific timestamp but does not have any.   ","category":"page"},{"location":"Prices/#Optional-Sink-Argument-(Julia-1.9)","page":"Prices","title":"Optional Sink Argument (Julia 1.9+)","text":"","category":"section"},{"location":"Prices/","page":"Prices","title":"Prices","text":"For Julia versions 1.9+ optional sink arguments can be given as the first argument. If you want to return a TimeArray from TimeSeries.jl execute get_prices(TimeArray,syombol,...). If you want to return a TSFrame from TSFrames.jl execute get_prices(TSFrame,syombol,...).","category":"page"},{"location":"Prices/","page":"Prices","title":"Prices","text":"You can also covert from the OrderedDict to these by using the following function:","category":"page"},{"location":"Prices/","page":"Prices","title":"Prices","text":"sink_prices_to(::Type{TimeArray}, x::OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}})\nsink_prices_to(::Type{TSFrame}, x::OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}})","category":"page"},{"location":"Prices/#YFinance.sink_prices_to-Tuple{Type{TimeArray}, OrderedDict{String, Union{Vector{Float64}, Vector{DateTime}, String}}}","page":"Prices","title":"YFinance.sink_prices_to","text":"sink_prices_to(::Type{TimeArray}, x::OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}})\n\nConverts an existing OrderedDict output from get_prices to a TimeArray\n\n\n\n\n\n","category":"method"},{"location":"Prices/#YFinance.sink_prices_to-Tuple{Type{TSFrame}, OrderedDict{String, Union{Vector{Float64}, Vector{DateTime}, String}}}","page":"Prices","title":"YFinance.sink_prices_to","text":"sink_prices_to(::Type{TSFrame}, x::OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}})\n\nConverts an existing OrderedDict output from get_prices to a TSFrame\n\n\n\n\n\n","category":"method"},{"location":"Prices/#get_prices","page":"Prices","title":"get_prices","text":"","category":"section"},{"location":"Prices/","page":"Prices","title":"Prices","text":"get_prices","category":"page"},{"location":"Prices/#YFinance.get_prices","page":"Prices","title":"YFinance.get_prices","text":"get_prices(::Type{TimeArray}, symbol::String; kwargs...)\n\nRetrieves prices from Yahoo Finance and stores them in a TimeArray\n\nArguments\n\n::Type{TimeArray}: Specifies that the output should be a TimeArray\nsymbol: A ticker (e.g., AAPL for Apple Inc., or ^GSPC for the S&P 500)\nkwargs...: Additional keyword arguments passed to YFinance.get_prices\nThese can include:\nrange: A string specifying the time range (e.g., \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\")\ninterval: The data interval (e.g., \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"60m\", \"90m\", \"1h\", \"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\")\nstartdt and enddt: Start and end dates (Date, DateTime, or String in \"yyyy-mm-dd\" format)\nprepost: Boolean for including pre and post market data\nautoadjust: Boolean for adjusting prices\ntimeout: HTTP request timeout in seconds\nthrow_error: Boolean for error handling behavior\nexchange_local_time: Boolean for timestamp localization\ndivsplits: Boolean for including dividends and stock split data\nwait: Float for specifying wait time between API calls\n\nFor detailed information on these parameters, refer to the YFinance.get_prices documentation.\n\nReturns\n\nA TimeArray containing the requested price data\n\n\n\n\n\nget_prices(symbol::String; range::String=\"5d\", interval::String=\"1d\", startdt::Union{Date,DateTime,AbstractString}=\"\", enddt::Union{Date,DateTime,AbstractString}=\"\", prepost::Bool=false, autoadjust::Bool=true, timeout::Int=10, throw_error::Bool=false, exchange_local_time::Bool=false, divsplits::Bool=false, wait::Float64=0.0)\n\nRetrieves prices from Yahoo Finance.\n\nArguments\n\nsymbol: A ticker (e.g., AAPL for Apple Inc., or ^GSPC for the S&P 500)\n\nYou can either provide a range or both startdt and enddt.\n\nrange: A string specifying the time range. It can be one of the predefined values (\"ytd\", \"max\") or a custom range using the following suffixes:\n\"m\" for minutes (e.g., \"30m\" for 30 minutes)\n\"d\" for days (e.g., \"7d\" for 7 days)\n\"mo\" for months (e.g., \"3mo\" for 3 months)\n\"y\" for years (e.g., \"1y\" for 1 year)\nstartdt and enddt: Can be of type Date, DateTime, or a String in the format \"yyyy-mm-dd\". Both must be provided if one is specified.\ninterval: The data interval. Valid values are \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"60m\", \"90m\", \"1h\", \"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\". Defaults to \"1d\".\nprepost: Boolean indicating whether pre and post market data should be included. Defaults to false.\nautoadjust: Defaults to true. Adjusts open, high, low, close prices, and volume by multiplying by the ratio between the close and the adjusted close prices - only available for intervals of 1d and up.\ntimeout: The timeout for the HTTP request in seconds. Defaults to 10.\nthrow_error: Boolean, defaults to false. If set to true, the function raises an error when the ticker is not valid or other issues occur. If false, a warning is given and an empty OrderedDict is returned.\nexchange_local_time: Boolean, defaults to false. If set to true, the timestamp corresponds to the exchange local time; otherwise, it's in GMT.\ndivsplits: Boolean, defaults to false. If set to true, dividends and stock split data are also returned. Split data contains the numerator, denominator, and split ratio. The interval needs to be set to \"1d\" for this to work.\nwait: Float, defaults to 0.0. Specifies the wait time in seconds between consecutive API calls when fetching minute data over extended periods.\n\nNotes\n\nFor minute data requests over periods longer than 7 days, the function automatically splits the request into multiple 7-day chunks and combines the results.\nWhen using startdt and enddt, both must be provided.\n\nReturns\n\nAn OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} containing the requested data.\n\nExamples\n\njulia> get_prices(\"AAPL\", range=\"1d\", interval=\"90m\")\nOrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} with 7 entries:\n  \"ticker\"    => \"AAPL\"\n  \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")]   \n  \"open\"      => [127.99, 129.96, 129.992, 130.035, 129.95, 129.61]\n  \"high\"      => [129.98, 130.481, 130.098, 130.24, 130.22, 129.61]\n  \"low\"       => [127.73, 129.44, 129.325, 129.7, 129.56, 129.61]\n  \"close\"     => [129.954, 129.998, 130.035, 129.95, 129.6, 129.61]\n  \"vol\"       => [2.9101646e7, 1.4058713e7, 9.897737e6, 9.552323e6, 6.308537e6, 0.0]\n\n## Can be easily converted to a DataFrame\njulia> using DataFrames\njulia> get_prices(\"AAPL\", range=\"1d\", interval=\"90m\") |> DataFrame\n6×7 DataFrame\n Row │ ticker  timestamp            open     high     low      close    vol       \n     │ String  DateTime             Float64  Float64  Float64  Float64  Float64   \n─────┼────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2022-12-29T14:30:00  127.99   129.98   127.73   129.954  2.9101646e7\n   2 │ AAPL    2022-12-29T16:00:00  129.96   130.481  129.44   129.998  1.4058713e7\n   3 │ AAPL    2022-12-29T17:30:00  129.992  130.098  129.325  130.035  9.897737e6\n   4 │ AAPL    2022-12-29T19:00:00  130.035  130.24   129.7    129.95   9.552323e6\n   5 │ AAPL    2022-12-29T20:30:00  129.95   130.22   129.56   129.6    6.308537e6\n   6 │ AAPL    2022-12-29T21:00:00  129.61   129.61   129.61   129.61   0.0\n\n## Broadcasting\njulia> get_prices.([\"AAPL\",\"NFLX\"], range=\"1d\", interval=\"90m\")\n2-element Vector{OrderedDict{String, Union{String, Vector{DateTime}, Vector{Float64}}}}:\n OrderedDict{String, Union{String, Vector{DateTime}, Vector{Float64}}} with 7 entries:\n  \"ticker\"    => \"AAPL\"\n  \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")]\n  \"open\"      => [127.98999786376953, 129.9600067138672, 129.99240112304688, 130.03500366210938, 129.9499969482422, 129.61000061035156]\n  \"high\"      => [129.97999572753906, 130.4813995361328, 130.09829711914062, 130.24000549316406, 130.22000122070312, 129.61000061035156]\n  \"low\"       => [127.7300033569336, 129.44000244140625, 129.3249969482422, 129.6999969482422, 129.55999755859375, 129.61000061035156]\n  \"close\"     => [129.95419311523438, 129.99830627441406, 130.03500366210938, 129.9499969482422, 129.60000610351562, 129.61000061035156]\n  \"vol\"       => [2.9101646e7, 1.4058713e7, 9.897737e6, 9.552323e6, 6.308537e6, 0.0]\n OrderedDict{String, Union{String, Vector{DateTime}, Vector{Float64}}} with 7 entries:\n  \"ticker\"    => \"NFLX\"\n  \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")]\n  \"open\"      => [283.17999267578125, 289.5199890136719, 293.4200134277344, 290.05499267578125, 290.760009765625, 291.1199951171875]\n  \"high\"      => [291.8699951171875, 295.4999084472656, 293.5, 291.32000732421875, 292.3299865722656, 291.1199951171875]\n  \"low\"       => [281.010009765625, 289.489990234375, 289.5400085449219, 288.7699890136719, 290.5400085449219, 291.1199951171875]\n  \"close\"     => [289.5199890136719, 293.46990966796875, 290.04998779296875, 290.82000732421875, 291.1199951171875, 291.1199951171875]\n  \"vol\"       => [2.950791e6, 2.458057e6, 1.362915e6, 1.212217e6, 1.121821e6, 0.0]\n\n## Converting it to a DataFrame:\njulia> using DataFrames\njulia> data = get_prices.([\"AAPL\",\"NFLX\"], range=\"1d\", interval=\"90m\");\njulia> vcat([DataFrame(i) for i in data]...)\n12×7 DataFrame\n Row │ ticker  timestamp            open     high     low      close    vol       \n     │ String  DateTime             Float64  Float64  Float64  Float64  Float64   \n─────┼────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2022-12-29T14:30:00  127.99   129.98   127.73   129.954  2.9101646e7\n   2 │ AAPL    2022-12-29T16:00:00  129.96   130.481  129.44   129.998  1.4058713e7\n   3 │ AAPL    2022-12-29T17:30:00  129.992  130.098  129.325  130.035  9.897737e6\n   4 │ AAPL    2022-12-29T19:00:00  130.035  130.24   129.7    129.95   9.552323e6\n   5 │ AAPL    2022-12-29T20:30:00  129.95   130.22   129.56   129.6    6.308537e6\n   6 │ AAPL    2022-12-29T21:00:00  129.61   129.61   129.61   129.61   0.0\n   7 │ NFLX    2022-12-29T14:30:00  283.18   291.87   281.01   289.52   2.950791e6\n   8 │ NFLX    2022-12-29T16:00:00  289.52   295.5    289.49   293.47   2.458057e6\n   9 │ NFLX    2022-12-29T17:30:00  293.42   293.5    289.54   290.05   1.362915e6\n  10 │ NFLX    2022-12-29T19:00:00  290.055  291.32   288.77   290.82   1.212217e6\n  11 │ NFLX    2022-12-29T20:30:00  290.76   292.33   290.54   291.12   1.121821e6\n  12 │ NFLX    2022-12-29T21:00:00  291.12   291.12   291.12   291.12   0.0\n\n\n\n\n\nget_prices(::Type{TSFrame}, symbol::String; kwargs...)\n\nRetrieves prices from Yahoo Finance and stores them in a TSFrame\n\nArguments\n\n::Type{TSFrame}: Specifies that the output should be a TSFrame\nsymbol: A ticker (e.g., AAPL for Apple Inc., or ^GSPC for the S&P 500)\nkwargs...: Additional keyword arguments passed to YFinance.get_prices\nThese can include:\nrange: A string specifying the time range (e.g., \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\")\ninterval: The data interval (e.g., \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"60m\", \"90m\", \"1h\", \"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\")\nstartdt and enddt: Start and end dates (Date, DateTime, or String in \"yyyy-mm-dd\" format)\nprepost: Boolean for including pre and post market data\nautoadjust: Boolean for adjusting prices\ntimeout: HTTP request timeout in seconds\nthrow_error: Boolean for error handling behavior\nexchange_local_time: Boolean for timestamp localization\ndivsplits: Boolean for including dividends and stock split data\nwait: Float for specifying wait time between API calls\n\nFor detailed information on these parameters, refer to the YFinance.get_prices documentation.\n\nReturns\n\nA TSFrame containing the requested price data\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Download-Quote-Summary-Data","page":"QuoteSummary","title":"Download Quote Summary Data","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"The quote summary item contains tons of different kinds of information. Not all information is available for all tickers. The get_quoteSummary function returns all items available for the ticker.","category":"page"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_quoteSummary","category":"page"},{"location":"QuoteSummary/#YFinance.get_quoteSummary","page":"QuoteSummary","title":"YFinance.get_quoteSummary","text":"get_quoteSummary(symbol::String; item=nothing)\n\nRetrievs general information from Yahoo Finance stored in a JSON3 object.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem can either be a string or multiple items as a Vector of Strings. To see valid items call _QuoteSummary_Items (not all items are available for all types of securities)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty JSON3.Object is returned.\n\nExamples\n\njulia> get_quoteSummary(\"AAPL\")\n\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 31 entries:\n:assetProfile             => {…\n:recommendationTrend      => {…\n:cashflowStatementHistory => {…\n\n⋮                         => ⋮\njulia> get_quoteSummary(\"AAPL\",item = \"quoteType\")\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 13 entries:\n:exchange               => \"NMS\"\n:quoteType              => \"EQUITY\"\n:symbol                 => \"AAPL\"\n⋮                       => ⋮\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Sub-Items","page":"QuoteSummary","title":"Sub-Items","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"The below functions can extract certain items from the Yahoo quoteSummary. The functions below return OrderedDictionaries form the OrderCollections.jl package that can readily be piped into a DataFrame.","category":"page"},{"location":"QuoteSummary/#Calendar-Events","page":"QuoteSummary","title":"Calendar Events","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_calendar_events","category":"page"},{"location":"QuoteSummary/#YFinance.get_calendar_events","page":"QuoteSummary","title":"YFinance.get_calendar_events","text":"get_calendar_events(quoteSummary::JSON3.Object)\n\nRetrievs calendar events from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_calendar_events\nOrderedDict{String, Any} with 3 entries:\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> get_calendar_events(\"AAPL\")\nOrderedDict{String, Any} with 3 entries:\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> using DataFrames\njulia> get_calendar_events(\"AAPL\") |> DataFrame\n2×3 DataFrame\n Row │ dividend_date        earnings_dates       exdividend_date     \n     │ DateTime             DateTime             DateTime\n─────┼───────────────────────────────────────────────────────────────\n   1 │ 2022-11-10T00:00:00  2023-01-25T10:59:00  2022-11-04T00:00:00\n   2 │ 2022-11-10T00:00:00  2023-01-30T12:00:00  2022-11-04T00:00:00\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Earnings-Estimates","page":"QuoteSummary","title":"Earnings Estimates","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_earnings_estimates","category":"page"},{"location":"QuoteSummary/#YFinance.get_earnings_estimates","page":"QuoteSummary","title":"YFinance.get_earnings_estimates","text":"get_earnings_estimates(quoteSummary::JSON3.Object)\n\nRetrievs the earnings estimates from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_earnings_estimates\nOrderedDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 1.98]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> get_earnings_estimates(\"AAPL\")\nOrderedDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 1.98]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> using DataFrames\njulia> get_earnings_estimates(\"AAPL\") |> DataFrame\n5×3 DataFrame\n Row │ quarter  estimate  actual     \n     │ String   Float64   Float64?   \n─────┼───────────────────────────────\n   1 │ 4Q2021       1.89        2.1\n   2 │ 1Q2022       1.43        1.52\n   3 │ 2Q2022       1.16        1.2\n   4 │ 3Q2022       1.27        1.29\n   5 │ 4Q2022       1.98  missing   \n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Earnings-Per-Share-(EPS)","page":"QuoteSummary","title":"Earnings Per Share (EPS)","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_eps","category":"page"},{"location":"QuoteSummary/#YFinance.get_eps","page":"QuoteSummary","title":"YFinance.get_eps","text":"get_eps(quoteSummary::JSON3.Object)\n\nRetrievs the earnings per share from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_eps\nOrderedDict{String, Vector} with 4 entries:\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n\njulia> get_eps(\"AAPL\")\nOrderedDict{String, Vector} with 4 entries:\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n\njulia> using DataFrames\njulia> get_eps(\"AAPL\") |> DataFrame\n4×4 DataFrame\n Row │ quarter              estimate  actual   surprise \n     │ DateTime             Float64   Float64  Float64  \n─────┼──────────────────────────────────────────────────\n   1 │ 2021-12-31T00:00:00      1.89     2.1      0.111\n   2 │ 2022-03-31T00:00:00      1.43     1.52     0.063\n   3 │ 2022-06-30T00:00:00      1.16     1.2      0.034\n   4 │ 2022-09-30T00:00:00      1.27     1.29     0.016\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Insider-Holdings","page":"QuoteSummary","title":"Insider Holdings","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_insider_holders","category":"page"},{"location":"QuoteSummary/#YFinance.get_insider_holders","page":"QuoteSummary","title":"YFinance.get_insider_holders","text":"get_insider_holders(quoteSummary::JSON3.Object)\n\nRetrievs the insiders holdings from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_holders\nOrderedDict{String, Vector} with 8 entries:\n    \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG ANDREA\", \"KONDO C…\n    \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Director\", \"Direct…  \n    \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"Conversion of E…  \n    \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31505, 4588720, …  \n    \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing, missing, mis…  \n    \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, missing, missing, …\n\njulia> get_insider_holders(\"AAPL\")\nOrderedDict{String, Vector} with 8 entries:\n    \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG ANDREA\", \"KONDO C…\n    \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Director\", \"Direct…  \n    \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"Conversion of E…  \n    \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31505, 4588720, …  \n    \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing, missing, mis…  \n    \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, missing, missing, …\n\n\njulia> using DataFrames\njulia> get_insider_holders(\"AAPL\") |> DataFrame\n10×8 DataFrame\n Row │ name                relation                 description                        l ⋯\n     │ String              String?                  String?                            D ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ ADAMS KATHERINE L   General Counsel          Sale                               2 ⋯\n   2 │ BELL JAMES A        Director                 Stock Gift                         2  \n   3 │ JUNG ANDREA         Director                 Conversion of Exercise of deriva…  2  \n   4 │ KONDO CHRISTOPHER   Officer                  Sale                               2  \n   5 │ LEVINSON ARTHUR D   Director                 Sale                               2 ⋯\n   6 │ MAESTRI LUCA        Chief Financial Officer  Sale                               2  \n   7 │ O'BRIEN DEIRDRE     Officer                  Sale                               2  \n   8 │ SUGAR RONALD D      Director                 Conversion of Exercise of deriva…  2  \n   9 │ WAGNER SUSAN L      Director                 Conversion of Exercise of deriva…  2 ⋯\n  10 │ WILLIAMS JEFFREY E  Chief Operating Officer  Conversion of Exercise of deriva…  2  \n                                                                         5 columns omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Insider-Transactions","page":"QuoteSummary","title":"Insider Transactions","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_insider_transactions","category":"page"},{"location":"QuoteSummary/#YFinance.get_insider_transactions","page":"QuoteSummary","title":"YFinance.get_insider_transactions","text":"get_insider_transactions(quoteSummary::JSON3.Object)\n\nRetrievs the insider transactions from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_transactions\nOrderedDict{String, Vector} with 7 entries:\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRDRE\", \"KONDO CH…  \n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial Officer\", \"Offi…  \n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per share.\", \"Sale at…  \n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:00\"), DateTime…  \n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"I\"…  \n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16612, 181139, 1…  \n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, missing, missing…\n\njulia> get_insider_transactions(\"AAPL\")\nOrderedDict{String, Vector} with 7 entries:\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRDRE\", \"KONDO CH…  \n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial Officer\", \"Offi…  \n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per share.\", \"Sale at…  \n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:00\"), DateTime…  \n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"I\"…  \n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16612, 181139, 1…  \n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, missing, missing…\n\njulia> using DataFrames\njulia> get_insider_transactions(\"AAPL\") |> DataFrame\n75×7 DataFrame\n Row │ filerName           filerRelation            transactionText                    d ⋯\n     │ String              String?                  String?                            D ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ KONDO CHRISTOPHER   Officer                  Sale at price 148.72 per share.    2 ⋯\n   2 │ MAESTRI LUCA        Chief Financial Officer  Sale at price 154.70 - 157.20 pe…  2  \n   3 │ O'BRIEN DEIRDRE     Officer                  Sale at price 142.45 per share.    2  \n   4 │ KONDO CHRISTOPHER   Officer                                                     2  \n   5 │ O'BRIEN DEIRDRE     Officer                                                     2 ⋯   \n   6 │ ADAMS KATHERINE L   General Counsel          Sale at price 138.44 - 142.93 pe…  2  \n   7 │ O'BRIEN DEIRDRE     Officer                  Sale at price 141.09 - 142.83 pe…  2  \n  ⋮  │         ⋮                      ⋮                             ⋮                    ⋱\n  70 │ WAGNER SUSAN L      Director                                                    2  \n  71 │ JUNG ANDREA         Director                                                    2 ⋯\n  72 │ BELL JAMES A        Director                                                    2  \n  73 │ LOZANO MONICA C.    Director                                                    2  \n  74 │ GORE ALBERT A JR    Director                                                    2  \n  75 │ ADAMS KATHERINE L   General Counsel          Sale at price 131.79 - 134.56 pe…  2 ⋯\n                                                             4 columns and 62 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Institutional-Ownership","page":"QuoteSummary","title":"Institutional Ownership","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_institutional_ownership","category":"page"},{"location":"QuoteSummary/#YFinance.get_institutional_ownership","page":"QuoteSummary","title":"YFinance.get_institutional_ownership","text":"get_institutional_ownership(quoteSummary::JSON3.Object)\n\nRetrievs the institutional ownership from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_institutional_ownership\nOrderedDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Berkshire Hathaway,…  \n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:00\"), DateTime(\"2…  \n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372, 0.0221, 0.0176,…  \n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802319, 591543874, 3…  \n  \"value\"        => Union{Missing, Int64}[164913030135, 132233979050, 115975329111, 76670…  \n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.0111, 0.0191, 0.005…\n\njulia> get_institutional_ownership(\"AAPL\")\nOrderedDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Berkshire Hathaway,…  \n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:00\"), DateTime(\"2…  \n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372, 0.0221, 0.0176,…  \n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802319, 591543874, 3…  \n  \"value\"        => Union{Missing, Int64}[164913030135, 132233979050, 115975329111, 76670…  \n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.0111, 0.0191, 0.005…\n\njulia> using DataFrames\njulia> get_institutional_ownership(\"AAPL\") |> DataFrame\n10×6 DataFrame\n Row │ organization                   reportDate           pctHeld   position    value   ⋯\n     │ String                         DateTime?            Float64?  Int64?      Int64?  ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ Vanguard Group, Inc. (The)     2022-09-30T00:00:00    0.08    1272378901  1649130 ⋯\n   2 │ Blackrock Inc.                 2022-09-30T00:00:00    0.0641  1020245185  1322339  \n   3 │ Berkshire Hathaway, Inc        2022-09-30T00:00:00    0.0562   894802319  1159753  \n   4 │ State Street Corporation       2022-09-30T00:00:00    0.0372   591543874   766700  \n   5 │ FMR, LLC                       2022-09-30T00:00:00    0.0221   350900116   454801 ⋯\n   6 │ Geode Capital Management, LLC  2022-09-30T00:00:00    0.0176   279758518   362595  \n   7 │ Price (T.Rowe) Associates Inc  2022-09-30T00:00:00    0.0141   224863541   291445  \n   8 │ Morgan Stanley                 2022-09-30T00:00:00    0.0115   182728771   236834  \n   9 │ Northern Trust Corporation     2022-09-30T00:00:00    0.0111   176084862   228223 ⋯\n  10 │ Bank of America Corporation    2022-09-30T00:00:00    0.0089   142260591   184383  \n                                                                         2 columns omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Major-Holders-Breakdown","page":"QuoteSummary","title":"Major Holders Breakdown","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_major_holders_breakdown","category":"page"},{"location":"QuoteSummary/#YFinance.get_major_holders_breakdown","page":"QuoteSummary","title":"YFinance.get_major_holders_breakdown","text":"get_major_holders_breakdown(quoteSummary::JSON3.Object)\n\nRetrievs the breakdown of the major holders from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_major_holders_breakdown\nOrderedDict{String, Real} with 4 entries:  \n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsPercentHeld\"      => 0.60915\n  \"institutionsFloatPercentHeld\" => 0.60959\n  \"institutionsCount\"            => 5526  \n\njulia> get_major_holders_breakdown(\"AAPL\")\nOrderedDict{String, Real} with 4 entries:  \n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsPercentHeld\"      => 0.60915\n  \"institutionsFloatPercentHeld\" => 0.60959\n  \"institutionsCount\"            => 5526\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Analyst-Recommendation-Trend","page":"QuoteSummary","title":"Analyst Recommendation Trend","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_recommendation_trend","category":"page"},{"location":"QuoteSummary/#YFinance.get_recommendation_trend","page":"QuoteSummary","title":"YFinance.get_recommendation_trend","text":"get_recommendation_trend(quoteSummary::JSON3.Object)\n\nRetrievs the recommendation trend from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_recommendation_trend\nOrderedDict{String, Vector} with 6 entries:\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"strongbuy\"  => [11, 11, 11, 13]\n  \"buy\"        => [21, 25, 26, 20]\n  \"hold\"       => [6, 6, 5, 8]\n  \"sell\"       => [0, 1, 1, 0]\n  \"strongsell\" => [0, 0, 0, 0]\n\njulia> get_recommendation_trend(\"AAPL\")\nOrderedDict{String, Vector} with 6 entries:\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"strongbuy\"  => [11, 11, 11, 13]\n  \"buy\"        => [21, 25, 26, 20]\n  \"hold\"       => [6, 6, 5, 8]\n  \"sell\"       => [0, 1, 1, 0]\n  \"strongsell\" => [0, 0, 0, 0]\n  \njulia> using DataFrames\njulia> get_recommendation_trend(\"AAPL\") |> DataFrame\n4×6 DataFrame\n Row │ period  strongbuy  buy    hold   sell   strongsell \n     │ String  Int64      Int64  Int64  Int64  Int64      \n─────┼────────────────────────────────────────────────────\n   1 │ 0m             11     21      6      0           0\n   2 │ -1m            11     25      6      1           0\n   3 │ -2m            11     26      5      1           0\n   4 │ -3m            13     20      8      0           0\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Up-and-Downgrade-History","page":"QuoteSummary","title":"Up- & Downgrade History","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_upgrade_downgrade_history","category":"page"},{"location":"QuoteSummary/#YFinance.get_upgrade_downgrade_history","page":"QuoteSummary","title":"YFinance.get_upgrade_downgrade_history","text":"get_upgrade_downgrade_history(quoteSummary::JSON3.Object)\n\nRetrievs the upgrade and downgrade history from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_upgrade_downgrade_history\nOrderedDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"JP Morgan\", \"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclays\", …  \n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-12-20T11:47:33\"), DateTime(\"2022…  \n  \"toGrade\"   => Union{Missing, String}[\"Overweight\", \"Buy\", \"Overweight\", \"Neutral\", \"Eq…  \n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"  …  \"\", \"\"…  \n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", \"main\", \"main\", \"…\n\njulia> get_upgrade_downgrade_history(\"AAPL\")\nOrderedDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"JP Morgan\", \"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclays\", …  \n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-12-20T11:47:33\"), DateTime(\"2022…  \n  \"toGrade\"   => Union{Missing, String}[\"Overweight\", \"Buy\", \"Overweight\", \"Neutral\", \"Eq…  \n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"  …  \"\", \"\"…  \n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", \"main\", \"main\", \"…\n  \njulia> using DataFrames\njulia> get_upgrade_downgrade_history(\"AAPL\") |> DataFrame\n872×5 DataFrame\n Row │ firm               date                 toGrade       fromGrade  action  \n     │ String             DateTime?            String?       String?    String? \n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ JP Morgan          2022-12-20T11:47:33  Overweight               main\n   2 │ UBS                2022-11-08T12:17:03  Buy                      main\n   3 │ Morgan Stanley     2022-11-08T12:14:23  Overweight               main\n   4 │ B of A Securities  2022-11-07T13:08:30  Neutral                  main\n   5 │ Barclays           2022-11-07T12:39:27  Equal-Weight             main\n   6 │ Wedbush            2022-10-28T13:19:17  Outperform               main\n   7 │ Credit Suisse      2022-10-28T11:59:30  Outperform               main\n  ⋮  │         ⋮                   ⋮                ⋮            ⋮         ⋮\n 867 │ Oxen Group         2012-03-14T15:25:00  Buy                      init\n 868 │ Canaccord Genuity  2012-03-14T08:21:00  Buy                      main\n 869 │ Morgan Stanley     2012-03-14T06:13:00  Overweight               main\n 870 │ Jefferies          2012-03-13T06:08:00  Buy                      main\n 871 │ FBN Securities     2012-03-08T07:33:00  Outperform               main\n 872 │ Canaccord Genuity  2012-02-09T08:17:00  Buy                      main\n                                                                859 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Summary-Detail","page":"QuoteSummary","title":"Summary Detail","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_summary_detail","category":"page"},{"location":"QuoteSummary/#YFinance.get_summary_detail","page":"QuoteSummary","title":"YFinance.get_summary_detail","text":"get_summary_detail(quoteSummary::JSON3.Object)\n\nRetrievs the summaryDetail Item from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_summary_detail\nOrderedDict{String, Any} with 41 entries:\n  \"priceHint\"                  => 2\n  \"previousClose\"              => 126.04\n  \"open\"                       => 127.99\n  \"dayLow\"                     => 127.815\n  \"dayHigh\"                    => 130.48\n  \"regularMarketPreviousClose\" => 126.04\n  \"regularMarketOpen\"          => 127.99\n  \"regularMarketDayLow\"        => 127.815\n  \"regularMarketDayHigh\"       => 130.48\n  \"dividendRate\"               => 0.92\n  \"dividendYield\"              => 0.0073\n  \"exDividendDate\"             => 1667520000\n  \"payoutRatio\"                => 0.1473\n  \"fiveYearAvgDividendYield\"   => 0.99\n  \"beta\"                       => 1.21947\n  \"trailingPE\"                 => 21.2128\n  \"forwardPE\"                  => 19.1448\n  ⋮                            => ⋮\n\njulia> get_summary_detail(\"AAPL\")\nOrderedDict{String, Any} with 41 entries:\n  \"priceHint\"                  => 2\n  \"previousClose\"              => 126.04\n  \"open\"                       => 127.99\n  \"dayLow\"                     => 127.815\n  \"dayHigh\"                    => 130.48\n  \"regularMarketPreviousClose\" => 126.04\n  \"regularMarketOpen\"          => 127.99\n  \"regularMarketDayLow\"        => 127.815\n  \"regularMarketDayHigh\"       => 130.48\n  \"dividendRate\"               => 0.92\n  \"dividendYield\"              => 0.0073\n  \"exDividendDate\"             => 1667520000\n  \"payoutRatio\"                => 0.1473\n  \"fiveYearAvgDividendYield\"   => 0.99\n  \"beta\"                       => 1.21947\n  \"trailingPE\"                 => 21.2128\n  \"forwardPE\"                  => 19.1448\n  ⋮                            => ⋮\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Sector-and-Industry","page":"QuoteSummary","title":"Sector & Industry","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_sector_industry","category":"page"},{"location":"QuoteSummary/#YFinance.get_sector_industry","page":"QuoteSummary","title":"YFinance.get_sector_industry","text":"get_sector_industry(quoteSummary::JSON3.Object)\n\nRetrievs the Sector and Industry from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_sector_industry\nOrderedDict{String, String} with 2 entries:\n  \"sector\"   => \"Technology\"\n  \"industry\" => \"Consumer Electronics\"\n\njulia> get_sector_industry(\"AAPL\")\nOrderedDict{String, String} with 2 entries:\n  \"sector\"   => \"Technology\"\n  \"industry\" => \"Consumer Electronics\"\n\n\n\n\n\n","category":"function"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.10\nImprovementsget_prices now supports the retrieval of minute level data for periods longer than 7 days. This is facilitated by making multiple requests and stitching the responses together (minute data still needs to be within the last 30 days - this is a limit set by Yahoo)\nget_prices now allows startdt and enddt to be of different types (e.g., startdt=\"2024-01-01\", enddt=today() is now valid)\nThe range argument in get_prices has been reworked to convert to startdt and enddt. Previously, this parameter was simply passed to the Yahoo API. The new way brings multiple improvements:\nmore flexible range inputs\nspecified intervals are now observed\nSignificant code refactoring for improved maintainability and readability of the get_prices function\nget_prices now returns a OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} rather than OrderedDict{String,Any}\nAdded precompilation for the response processing part of the get_prices function only","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.9\nBug FixGetting rid of precompilation. Precompilation hangs and also doesn't work if a proxy is required (#23)","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.8\nBug Fixget_prices fixes indexing error when divsplits=true (#22)","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.7\nBug Fixget_prices, get_splits, get_dividends now error more nicely when there is no data for the selected date range. (#19)","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.6\nImprovementsget_prices can now return dividends and splits (#11, #18)\nget_prices can now directly return TimeArrays (TimeSeries.jl) and TSFrame (TSFrames.jl). Julia 1.9 is required and the respective packages need to be loaded\nadded some precompilation for get_prices (this will require a valid internet connection when the package is loaded first/installed)New Functionalityget_splits returns stock split information\nget_dividends returns dividend information\nsink_prices_to allows for easy conversion to TimeArrays (TimeSeries.jl) and TSFrame (TSFrames.jl). Julia 1.9 is required and the respective packages need to be loaded","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.5\nBug FixImplemented Cookies and Crumbs to fix get_quoteSummary() and all functions depending on it (#14) ","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.4\nBug Fixget_prices now returns dictionaries containing price vectors of type Array{Float64} rather than Array{ Union{Nothing,Float64}} (#7) Improvementsget_prices now runs faster than before.New Functionalityget_symbols allows the user to search for yahoo finance symbols from (partial) company/security names\nget_all_symbols exposes all tickers from the NASDAQ, AMEX, and NYSE exchanges (#8)\nsearch_news now allows for news searchesDocsAdded documentation for the new functionality\nAdded a clarification statement in the Readme.md and Docs that YFinance uses API endpoints to access data and does not suffer from decryption issues (#6)","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.3\nBug Fixget_prices would error when autoadjust=true for some tickers when Yahoo returns nothing for some observations in the price time series. The update now does not error in this cases and returns NaN for the missing datapoints. NaN is used instead of Missing because of performance improvements and the ability to integrate YFinance.jl with TimeSeries.jl. (#5) \nThank you RaSi96 for reporting this bug and helping me sort it out!DocsImproved documentation for get_prices (#5)\nWhen the range keyword is used instead of startdt and enddt the specified interval is not observed by Yahoo at longer ranges. To enforce the specified interval use startdt and enddt instead. \nData points that yahoo returns as nothing are returned as NaN. It seems like Yahoo thinks it should have price information for these timestamps but does not have them and thus returns nothing.OtherAdded a test case for the stock \"ADANIENT.NS\". The time series of the stock prices contains the nothing values mentioned in the Bug Fix. (#5)","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.2\nChangesReturn OrderedDict from OrderedCollections.jl instead of Dict\nShould be non breaking as all functions that work for Base.Dict also work for OrderedCollections.OrderedDict\nAllow the setting of HTTP proxies (through HTTP.jl). Also allows for secured HTTP proxies with a username and password\nDefault is no proxy so change is non breakingFixes:get_Fundamentals() does now return a timestampDocsAdded Documentation for the proxy settings\nAdded an Example Section:\nSome quick code to convert Price data to a DataFrame, TimeSeries.TimeArray, TSFrames.TSFrame\nGave some examples of plotting some data exposed by YFinance.jl with PlotlyJS.jl\nAdded this version change logNew DependenciesBase64\nNeeded for http proxy authentication\nOrderedCollections.jl\nProvides Ordered Dictionaries. Eases workflow with data because column order is not arbitrary and changing between calls.","category":"page"},{"location":"AllFunctions/#All-Functions","page":"All Functions","title":"All Functions","text":"","category":"section"},{"location":"AllFunctions/","page":"All Functions","title":"All Functions","text":"Modules = [YFinance]","category":"page"},{"location":"AllFunctions/#YFinance.NewsItem","page":"All Functions","title":"YFinance.NewsItem","text":"This is an NewsItem\n\nFields\n\ntitle: Title of the news article\npublisher: Publisher of the news \nlink: The link to the news article\ntimestamp: The timestamp of the time when the news was published (DateTime)\nsymbols: An array of the tickers related to the news item\n\n\n\n\n\n","category":"type"},{"location":"AllFunctions/#YFinance.YahooNews","page":"All Functions","title":"YFinance.YahooNews","text":"This is an YahooNews <: AbstractArray{NewsItem, N}\n\nBasically a custom Array of NewsItems\n\n\n\n\n\n","category":"type"},{"location":"AllFunctions/#YFinance.YahooSearch","page":"All Functions","title":"YFinance.YahooSearch","text":"This is an YahooSearch <: AbstractArray{YahooSearchItem, N}\n\nBasically a custom Array of YahooSearchItems\n\n\n\n\n\n","category":"type"},{"location":"AllFunctions/#YFinance.YahooSearchItem","page":"All Functions","title":"YFinance.YahooSearchItem","text":"This is an YahooSearchItem\n\nFields\n\nsymbol: The Symbol (Ticker)\nshortname: The short name of the instrument/company\nquoteType: The type of asset (e.g. EQUITY)\nsector: The Sector (only if quotetype==EQUITY, otherwise \"\")\nindustry: The Industry (only if quotetype==EQUITY, otherwise \"\")\n\n\n\n\n\n","category":"type"},{"location":"AllFunctions/#YFinance._rand_header-Tuple{}","page":"All Functions","title":"YFinance._rand_header","text":"_rand_header()\n\nChooses a random header.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance._renew_cookies_and_crumb-Tuple{}","page":"All Functions","title":"YFinance._renew_cookies_and_crumb","text":"_renew_cookies_and_crumb()\n\nRenews both the cookies and the crumb.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance._set_cookies_and_crumb-Tuple{}","page":"All Functions","title":"YFinance._set_cookies_and_crumb","text":"_set_cookies_and_crumb()\n\nChecks if the global _COOKIE and _CRUMB variables are set if not it creates them. \n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.clear_proxy_settings-Tuple{}","page":"All Functions","title":"YFinance.clear_proxy_settings","text":"clear_proxy_settings()\n\nClears the proxy settings by setting them back to their default (no proxy configuration).    \n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.create_proxy_settings","page":"All Functions","title":"YFinance.create_proxy_settings","text":"create_proxy_settings(p::AbstractString,user=nothing,password=nothing)\n\nSets the global proxy variable _PROXY_SETTINGS::NamedTuple. This NamedTuple contains a proxy and a auth field. These fields default to nothing and and empty Dict respectively.\n\nArguments\n\np::String (Required) of the form: \"http://proxy.xyz.com:8080\"\nuser::String Username (optional) only required if proxy requires authentication. Defaults to nothing (no authentication needed)\npassword::String The password corresponding to the Username. Defaults to nothing (no authentication needed) \n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#YFinance.get_ESG-Tuple{String}","page":"All Functions","title":"YFinance.get_ESG","text":"get_ESG(symbol::String)\n\nRetrievs ESG Scores from Yahoo Finance stored in a OrderedCollections.OrderedDict with two items. One, score, contains the companies ESG scores and individal Overall, Environment, Social and  Goverance Scores as well as a timestamp of type DateTime. The other,  peer_score, contains the peer group's scores. The subdictionaries can be transformed to DataFrames\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_ESG(\"AAPL\")\nOrderedDict{String, OrderedDict{String, Any}} with 2 entries:\n  \"score\"      => OrderedDict(\"symbol\"=>\"AAPL\", \"timestamp\"=>[DateTime(\"2014-09-01T00:00:…\n  \"peer_score\" => OrderedDict(\"symbol\"=>\"Technology Hardware\", \"timestamp\"=>[DateTime(\"20…\n\njulia> using DataFrames\njulia> get_ESG(\"AAPL\")[\"score\"] |> DataFrame\n96×6 DataFrame\n Row │ symbol  timestamp            esgScore    governanceScore  environmentScore  socialScore \n     │ String  DateTime             Real?       Real?            Real?             Real?       \n─────┼─────────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2014-09-01T00:00:00       61               62                74           45\n   2 │ AAPL    2014-10-01T00:00:00       60               62                74           45\n   3 │ AAPL    2014-11-01T00:00:00       61               62                74           45\n  ⋮  │   ⋮              ⋮               ⋮              ⋮                ⋮               ⋮\n  95 │ AAPL    2022-07-01T00:00:00  missing          missing           missing      missing    \n  96 │ AAPL    2022-08-01T00:00:00       16.68             9.18              0.65         6.86\n                                                                                91 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_Fundamental-Tuple{AbstractString, AbstractString, AbstractString, Any, Any}","page":"All Functions","title":"YFinance.get_Fundamental","text":"get_Fundamental(symbol::AbstractString, item::AbstractString,interval::AbstractString, startdt, enddt)\n\nRetrievs financial statement information from Yahoo Finance stored in a OrderedCollections.OrderedDict.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem::String can either be an entire financial statement or a subitem. Entire financial statements:\"income_statement\", \"valuation\", \"cash_flow\", \"balance_sheet\". To see valid sub items grouped by financial statement type in a OrderedCollections.OrderedDict call _Fundamental_Types  \ninterval::String can be one of \"annual\", \"quarterly\", \"monthly\"  \nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_Fundamental(\"NFLX\", \"income_statement\",\"quarterly\",\"2000-01-01\",\"2022-12-31\")\nOrderedDict{String, Any} with 40 entries:\n  \"timestamp\"                       => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-0…  \"GeneralAndAdministrativeExpense\" => Any[397790000, 397928000, 409297000, 373213000]    \n  \"SellingGeneralAndAdministration\" => Any[1190503000, 953906000, 984257000, 941167000]   \n  \"InterestIncome\"                  => Any[108512000, 195645000, 220226000, 261404000]    \n  \"OperatingRevenue\"                => Any[7709318000, 7867767000, 7970141000, 7925589000]  \"DilutedNIAvailtoComStockholders\" => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"NormalizedIncome\"                => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"NetIncomeCommonStockholders\"     => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"BasicAverageShares\"              => Any[443462000, 444146000, 444557000, 444878000]    \n  ⋮                                 => ⋮\n\n\njulia> using DataFrames\njulia> get_Fundamental(\"AAPL\", \"InterestExpense\",\"quarterly\",\"2000-01-01\",\"2022-12-31\") |> DataFrame\n4×2 DataFrame\n Row │ timestamp            InterestExpense \n     │ DateTime             Any\n─────┼──────────────────────────────────────\n   1 │ 2021-12-31T00:00:00  694000000\n   2 │ 2022-03-31T00:00:00  691000000\n   3 │ 2022-06-30T00:00:00  719000000\n   4 │ 2022-09-30T00:00:00  827000000\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_Options-Tuple{String}","page":"All Functions","title":"YFinance.get_Options","text":"get_Options(symbol::String)\n\nRetrievs options data from Yahoo Finance stored in a OrderedCollections.OrderedDict with two items. One contains Call options the other Put options. These subitems are OrderedCollections.OrderedDict themselves. The call and put options OrderedCollections.OrderedDict can readily be transformed to a DataFrame.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_Options(\"AAPL\")\nOrderedDict{String, OrderedDict{String, Vector{Any}}} with 2 entries:\n  \"calls\" => OrderedDict(\"contractSymbol\"=>[\"AAPL221230C00050000\", \"AAPL221230C00055000\",…\n  \"puts\"  => OrderedDict(\"contractSymbol\"=>[\"AAPL221230P00050000\", \"AAPL221230P00055000\",…\n\njulia> using DataFrames\njulia> get_Options(\"AAPL\")[\"calls\"] |> DataFrame\n72×16 DataFrame\n Row │ contractSymbol       strike  currency  lastPrice  change  percentChange  volume   ⋯\n     │ Any                  Any     Any       Any        Any     Any            Any      ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL221230C00050000  50      USD       79.85      0       0              1        ⋯\n   2 │ AAPL221230C00055000  55      USD       72.85      0       0              1\n   3 │ AAPL221230C00060000  60      USD       66.4       0       0              19        \n  ⋮  │          ⋮             ⋮        ⋮          ⋮        ⋮           ⋮           ⋮     ⋱\n  71 │ AAPL221230C00230000  230     USD       0.02       0       0              missing   \n  72 │ AAPL221230C00250000  250     USD       0.01       0       0              2        ⋯\n                                                             9 columns and 67 rows omitted\n\njulia> using DataFrames\njulia> data  = get_Options(\"AAPL\");\njulia> vcat( [DataFrame(i) for i in values(data)]...)\n141×16 DataFrame\n Row │ contractSymbol       strike  currency  lastPrice  change  percentChange  volume   ⋯\n     │ Any                  Any     Any       Any        Any     Any            Any      ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL221230C00050000  50      USD       79.85      0       0              1        ⋯\n   2 │ AAPL221230C00055000  55      USD       72.85      0       0              1\n   3 │ AAPL221230C00060000  60      USD       66.4       0       0              19        \n  ⋮  │          ⋮             ⋮        ⋮          ⋮        ⋮           ⋮          ⋮      ⋱\n 140 │ AAPL221230P00225000  225     USD       94.65      0       0              1\n 141 │ AAPL221230P00230000  230     USD       99.65      0       0              1        ⋯\n                                                            9 columns and 136 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_all_symbols-Tuple{T} where T<:String","page":"All Functions","title":"YFinance.get_all_symbols","text":"get_all_symbols(market::T)::Vector{T} where {T<:String}\n\nFetch all the symbols from a given market.\n\nArguments\n\nmarket::String: The market to fetch the symbols from.\n\nCurrently supported markets are:\n\nAMEX\nNASDAQ\nNYSE  \n\nUses dumbstockapi.com\n\nReturns\n\nVector{String}: A vector of strings containing the symbols.\n\nExample\n\njulia> get_all_symbols(\"NYSE\")\n3127-element Vector{String}:\n \"A\"\n \"AA\"\n \"AAC\"\n \"AAN\"\n ⋮\n \"ZTR\"\n \"ZTS\"\n \"ZUO\"\n \"ZYME\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_calendar_events-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_calendar_events","text":"get_calendar_events(quoteSummary::JSON3.Object)\n\nRetrievs calendar events from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_calendar_events\nOrderedDict{String, Any} with 3 entries:\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> get_calendar_events(\"AAPL\")\nOrderedDict{String, Any} with 3 entries:\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> using DataFrames\njulia> get_calendar_events(\"AAPL\") |> DataFrame\n2×3 DataFrame\n Row │ dividend_date        earnings_dates       exdividend_date     \n     │ DateTime             DateTime             DateTime\n─────┼───────────────────────────────────────────────────────────────\n   1 │ 2022-11-10T00:00:00  2023-01-25T10:59:00  2022-11-04T00:00:00\n   2 │ 2022-11-10T00:00:00  2023-01-30T12:00:00  2022-11-04T00:00:00\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_cookie-Tuple{}","page":"All Functions","title":"YFinance.get_cookie","text":"get_cookie()\n\nRetrieves cookies from \"https://fc.yahoo.com\".\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_crumb-Tuple{}","page":"All Functions","title":"YFinance.get_crumb","text":"get_crumb()\n\nPassess the request header and the cookies to \"https://query2.finance.yahoo.com/v1/test/getcrumb\" and retrieves the crumb.  If the global _HEADER or _COOKIE variables are not defined they are created.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_dividends-Tuple{String}","page":"All Functions","title":"YFinance.get_dividends","text":"get_dividends(symbol::String; startdt::Union{Date,DateTime,AbstractString}=\"\", enddt::Union{Date,DateTime,AbstractString}=\"\", timeout::Int=10, throw_error::Bool=false, exchange_local_time::Bool=false)\n\nRetrieves dividend data from Yahoo Finance.\n\nArguments\n\nsymbol: A ticker (e.g., AAPL for Apple Inc., or ^GSPC for the S&P 500)\nstartdt and enddt: Optional. Can be of type Date, DateTime, or a String in the format \"yyyy-mm-dd\". If not provided, startdt defaults to the earliest available data and enddt to the current date.\ntimeout: Integer, defaults to 10. The timeout for the HTTP request in seconds.\nthrow_error: Boolean, defaults to false. If set to true, the function raises an error when the ticker is not valid or other issues occur. If false, a warning is given and an empty OrderedDict is returned.\nexchange_local_time: Boolean, defaults to false. If set to true, the timestamp corresponds to the exchange local time; otherwise, it's in GMT.\n\nReturns\n\nAn OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} containing the following keys:\n\nticker\ntimestamp\ndiv\n\nExamples\n\njulia> get_dividends(\"AAPL\", startdt = \"2021-01-01\", enddt=\"2022-01-01\")\nOrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} with 3 entries:\n  \"ticker\"    => \"AAPL\"\n  \"timestamp\" => [DateTime(\"2021-02-05T14:30:00\"), DateTime(\"2021-05-07T13:30:00\"), DateTime(\"2021-08-06T13:30:00\"), DateTime(\"2021-11-05T13:30:00\")]\n  \"div\"       => [0.205, 0.22, 0.22, 0.22]\n\n## Can be easily converted to a DataFrame\njulia> using DataFrames\njulia> get_dividends(\"AAPL\", startdt = \"2021-01-01\", enddt=\"2022-01-01\") |> DataFrame\n4×3 DataFrame\n Row │ ticker  timestamp            div     \n     │ String  DateTime             Float64 \n─────┼───────────────────────────────────────\n   1 │ AAPL    2021-02-05T14:30:00    0.205\n   2 │ AAPL    2021-05-07T13:30:00    0.22\n   3 │ AAPL    2021-08-06T13:30:00    0.22\n   4 │ AAPL    2021-11-05T13:30:00    0.22\n\n## Broadcasting\njulia> get_dividends.([\"AAPL\", \"F\"], startdt = \"2021-01-01\", enddt=\"2022-01-01\")\n2-element Vector{OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}}}:\n OrderedDict(\"ticker\" => \"AAPL\", \"timestamp\" => [DateTime(\"2021-02-05T14:30:00\"), DateTime(\"2021-05-07T13:30:00\"), DateTime(\"2021-08-06T13:30:00\"), DateTime(\"2021-11-05T13:30:00\")], \"div\" => [0.205, 0.22, 0.22, 0.22])\n OrderedDict(\"ticker\" => \"F\", \"timestamp\" => [DateTime(\"2021-11-18T14:30:00\")], \"div\" => [0.1])\n\n## Converting it to a DataFrame:\njulia> using DataFrames\njulia> data = get_dividends.([\"AAPL\", \"F\"], startdt = \"2021-01-01\", enddt=\"2022-01-01\");\n\njulia> vcat([DataFrame(i) for i in data]...)\n5×3 DataFrame\n Row │ ticker  timestamp            div     \n     │ String  DateTime             Float64 \n─────┼───────────────────────────────────────\n   1 │ AAPL    2021-02-05T14:30:00    0.205\n   2 │ AAPL    2021-05-07T13:30:00    0.22\n   3 │ AAPL    2021-08-06T13:30:00    0.22\n   4 │ AAPL    2021-11-05T13:30:00    0.22\n   5 │ F       2021-11-18T14:30:00    0.1\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_earnings_estimates-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_earnings_estimates","text":"get_earnings_estimates(quoteSummary::JSON3.Object)\n\nRetrievs the earnings estimates from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_earnings_estimates\nOrderedDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 1.98]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> get_earnings_estimates(\"AAPL\")\nOrderedDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 1.98]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> using DataFrames\njulia> get_earnings_estimates(\"AAPL\") |> DataFrame\n5×3 DataFrame\n Row │ quarter  estimate  actual     \n     │ String   Float64   Float64?   \n─────┼───────────────────────────────\n   1 │ 4Q2021       1.89        2.1\n   2 │ 1Q2022       1.43        1.52\n   3 │ 2Q2022       1.16        1.2\n   4 │ 3Q2022       1.27        1.29\n   5 │ 4Q2022       1.98  missing   \n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_eps-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_eps","text":"get_eps(quoteSummary::JSON3.Object)\n\nRetrievs the earnings per share from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_eps\nOrderedDict{String, Vector} with 4 entries:\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n\njulia> get_eps(\"AAPL\")\nOrderedDict{String, Vector} with 4 entries:\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n\njulia> using DataFrames\njulia> get_eps(\"AAPL\") |> DataFrame\n4×4 DataFrame\n Row │ quarter              estimate  actual   surprise \n     │ DateTime             Float64   Float64  Float64  \n─────┼──────────────────────────────────────────────────\n   1 │ 2021-12-31T00:00:00      1.89     2.1      0.111\n   2 │ 2022-03-31T00:00:00      1.43     1.52     0.063\n   3 │ 2022-06-30T00:00:00      1.16     1.2      0.034\n   4 │ 2022-09-30T00:00:00      1.27     1.29     0.016\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_insider_holders-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_insider_holders","text":"get_insider_holders(quoteSummary::JSON3.Object)\n\nRetrievs the insiders holdings from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_holders\nOrderedDict{String, Vector} with 8 entries:\n    \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG ANDREA\", \"KONDO C…\n    \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Director\", \"Direct…  \n    \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"Conversion of E…  \n    \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31505, 4588720, …  \n    \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing, missing, mis…  \n    \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, missing, missing, …\n\njulia> get_insider_holders(\"AAPL\")\nOrderedDict{String, Vector} with 8 entries:\n    \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG ANDREA\", \"KONDO C…\n    \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Director\", \"Direct…  \n    \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"Conversion of E…  \n    \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31505, 4588720, …  \n    \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing, missing, mis…  \n    \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, missing, missing, …\n\n\njulia> using DataFrames\njulia> get_insider_holders(\"AAPL\") |> DataFrame\n10×8 DataFrame\n Row │ name                relation                 description                        l ⋯\n     │ String              String?                  String?                            D ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ ADAMS KATHERINE L   General Counsel          Sale                               2 ⋯\n   2 │ BELL JAMES A        Director                 Stock Gift                         2  \n   3 │ JUNG ANDREA         Director                 Conversion of Exercise of deriva…  2  \n   4 │ KONDO CHRISTOPHER   Officer                  Sale                               2  \n   5 │ LEVINSON ARTHUR D   Director                 Sale                               2 ⋯\n   6 │ MAESTRI LUCA        Chief Financial Officer  Sale                               2  \n   7 │ O'BRIEN DEIRDRE     Officer                  Sale                               2  \n   8 │ SUGAR RONALD D      Director                 Conversion of Exercise of deriva…  2  \n   9 │ WAGNER SUSAN L      Director                 Conversion of Exercise of deriva…  2 ⋯\n  10 │ WILLIAMS JEFFREY E  Chief Operating Officer  Conversion of Exercise of deriva…  2  \n                                                                         5 columns omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_insider_transactions-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_insider_transactions","text":"get_insider_transactions(quoteSummary::JSON3.Object)\n\nRetrievs the insider transactions from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_transactions\nOrderedDict{String, Vector} with 7 entries:\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRDRE\", \"KONDO CH…  \n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial Officer\", \"Offi…  \n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per share.\", \"Sale at…  \n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:00\"), DateTime…  \n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"I\"…  \n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16612, 181139, 1…  \n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, missing, missing…\n\njulia> get_insider_transactions(\"AAPL\")\nOrderedDict{String, Vector} with 7 entries:\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRDRE\", \"KONDO CH…  \n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial Officer\", \"Offi…  \n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per share.\", \"Sale at…  \n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:00\"), DateTime…  \n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"I\"…  \n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16612, 181139, 1…  \n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, missing, missing…\n\njulia> using DataFrames\njulia> get_insider_transactions(\"AAPL\") |> DataFrame\n75×7 DataFrame\n Row │ filerName           filerRelation            transactionText                    d ⋯\n     │ String              String?                  String?                            D ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ KONDO CHRISTOPHER   Officer                  Sale at price 148.72 per share.    2 ⋯\n   2 │ MAESTRI LUCA        Chief Financial Officer  Sale at price 154.70 - 157.20 pe…  2  \n   3 │ O'BRIEN DEIRDRE     Officer                  Sale at price 142.45 per share.    2  \n   4 │ KONDO CHRISTOPHER   Officer                                                     2  \n   5 │ O'BRIEN DEIRDRE     Officer                                                     2 ⋯   \n   6 │ ADAMS KATHERINE L   General Counsel          Sale at price 138.44 - 142.93 pe…  2  \n   7 │ O'BRIEN DEIRDRE     Officer                  Sale at price 141.09 - 142.83 pe…  2  \n  ⋮  │         ⋮                      ⋮                             ⋮                    ⋱\n  70 │ WAGNER SUSAN L      Director                                                    2  \n  71 │ JUNG ANDREA         Director                                                    2 ⋯\n  72 │ BELL JAMES A        Director                                                    2  \n  73 │ LOZANO MONICA C.    Director                                                    2  \n  74 │ GORE ALBERT A JR    Director                                                    2  \n  75 │ ADAMS KATHERINE L   General Counsel          Sale at price 131.79 - 134.56 pe…  2 ⋯\n                                                             4 columns and 62 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_institutional_ownership-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_institutional_ownership","text":"get_institutional_ownership(quoteSummary::JSON3.Object)\n\nRetrievs the institutional ownership from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_institutional_ownership\nOrderedDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Berkshire Hathaway,…  \n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:00\"), DateTime(\"2…  \n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372, 0.0221, 0.0176,…  \n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802319, 591543874, 3…  \n  \"value\"        => Union{Missing, Int64}[164913030135, 132233979050, 115975329111, 76670…  \n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.0111, 0.0191, 0.005…\n\njulia> get_institutional_ownership(\"AAPL\")\nOrderedDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Berkshire Hathaway,…  \n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:00\"), DateTime(\"2…  \n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372, 0.0221, 0.0176,…  \n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802319, 591543874, 3…  \n  \"value\"        => Union{Missing, Int64}[164913030135, 132233979050, 115975329111, 76670…  \n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.0111, 0.0191, 0.005…\n\njulia> using DataFrames\njulia> get_institutional_ownership(\"AAPL\") |> DataFrame\n10×6 DataFrame\n Row │ organization                   reportDate           pctHeld   position    value   ⋯\n     │ String                         DateTime?            Float64?  Int64?      Int64?  ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ Vanguard Group, Inc. (The)     2022-09-30T00:00:00    0.08    1272378901  1649130 ⋯\n   2 │ Blackrock Inc.                 2022-09-30T00:00:00    0.0641  1020245185  1322339  \n   3 │ Berkshire Hathaway, Inc        2022-09-30T00:00:00    0.0562   894802319  1159753  \n   4 │ State Street Corporation       2022-09-30T00:00:00    0.0372   591543874   766700  \n   5 │ FMR, LLC                       2022-09-30T00:00:00    0.0221   350900116   454801 ⋯\n   6 │ Geode Capital Management, LLC  2022-09-30T00:00:00    0.0176   279758518   362595  \n   7 │ Price (T.Rowe) Associates Inc  2022-09-30T00:00:00    0.0141   224863541   291445  \n   8 │ Morgan Stanley                 2022-09-30T00:00:00    0.0115   182728771   236834  \n   9 │ Northern Trust Corporation     2022-09-30T00:00:00    0.0111   176084862   228223 ⋯\n  10 │ Bank of America Corporation    2022-09-30T00:00:00    0.0089   142260591   184383  \n                                                                         2 columns omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_major_holders_breakdown-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_major_holders_breakdown","text":"get_major_holders_breakdown(quoteSummary::JSON3.Object)\n\nRetrievs the breakdown of the major holders from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_major_holders_breakdown\nOrderedDict{String, Real} with 4 entries:  \n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsPercentHeld\"      => 0.60915\n  \"institutionsFloatPercentHeld\" => 0.60959\n  \"institutionsCount\"            => 5526  \n\njulia> get_major_holders_breakdown(\"AAPL\")\nOrderedDict{String, Real} with 4 entries:  \n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsPercentHeld\"      => 0.60915\n  \"institutionsFloatPercentHeld\" => 0.60959\n  \"institutionsCount\"            => 5526\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_prices-Tuple{String, Int64, Int64}","page":"All Functions","title":"YFinance.get_prices","text":"get_prices(symbol::String; range::String=\"5d\", interval::String=\"1d\", startdt::Union{Date,DateTime,AbstractString}=\"\", enddt::Union{Date,DateTime,AbstractString}=\"\", prepost::Bool=false, autoadjust::Bool=true, timeout::Int=10, throw_error::Bool=false, exchange_local_time::Bool=false, divsplits::Bool=false, wait::Float64=0.0)\n\nRetrieves prices from Yahoo Finance.\n\nArguments\n\nsymbol: A ticker (e.g., AAPL for Apple Inc., or ^GSPC for the S&P 500)\n\nYou can either provide a range or both startdt and enddt.\n\nrange: A string specifying the time range. It can be one of the predefined values (\"ytd\", \"max\") or a custom range using the following suffixes:\n\"m\" for minutes (e.g., \"30m\" for 30 minutes)\n\"d\" for days (e.g., \"7d\" for 7 days)\n\"mo\" for months (e.g., \"3mo\" for 3 months)\n\"y\" for years (e.g., \"1y\" for 1 year)\nstartdt and enddt: Can be of type Date, DateTime, or a String in the format \"yyyy-mm-dd\". Both must be provided if one is specified.\ninterval: The data interval. Valid values are \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"60m\", \"90m\", \"1h\", \"1d\", \"5d\", \"1wk\", \"1mo\", \"3mo\". Defaults to \"1d\".\nprepost: Boolean indicating whether pre and post market data should be included. Defaults to false.\nautoadjust: Defaults to true. Adjusts open, high, low, close prices, and volume by multiplying by the ratio between the close and the adjusted close prices - only available for intervals of 1d and up.\ntimeout: The timeout for the HTTP request in seconds. Defaults to 10.\nthrow_error: Boolean, defaults to false. If set to true, the function raises an error when the ticker is not valid or other issues occur. If false, a warning is given and an empty OrderedDict is returned.\nexchange_local_time: Boolean, defaults to false. If set to true, the timestamp corresponds to the exchange local time; otherwise, it's in GMT.\ndivsplits: Boolean, defaults to false. If set to true, dividends and stock split data are also returned. Split data contains the numerator, denominator, and split ratio. The interval needs to be set to \"1d\" for this to work.\nwait: Float, defaults to 0.0. Specifies the wait time in seconds between consecutive API calls when fetching minute data over extended periods.\n\nNotes\n\nFor minute data requests over periods longer than 7 days, the function automatically splits the request into multiple 7-day chunks and combines the results.\nWhen using startdt and enddt, both must be provided.\n\nReturns\n\nAn OrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} containing the requested data.\n\nExamples\n\njulia> get_prices(\"AAPL\", range=\"1d\", interval=\"90m\")\nOrderedDict{String, Union{String,Vector{DateTime},Vector{Float64}}} with 7 entries:\n  \"ticker\"    => \"AAPL\"\n  \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")]   \n  \"open\"      => [127.99, 129.96, 129.992, 130.035, 129.95, 129.61]\n  \"high\"      => [129.98, 130.481, 130.098, 130.24, 130.22, 129.61]\n  \"low\"       => [127.73, 129.44, 129.325, 129.7, 129.56, 129.61]\n  \"close\"     => [129.954, 129.998, 130.035, 129.95, 129.6, 129.61]\n  \"vol\"       => [2.9101646e7, 1.4058713e7, 9.897737e6, 9.552323e6, 6.308537e6, 0.0]\n\n## Can be easily converted to a DataFrame\njulia> using DataFrames\njulia> get_prices(\"AAPL\", range=\"1d\", interval=\"90m\") |> DataFrame\n6×7 DataFrame\n Row │ ticker  timestamp            open     high     low      close    vol       \n     │ String  DateTime             Float64  Float64  Float64  Float64  Float64   \n─────┼────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2022-12-29T14:30:00  127.99   129.98   127.73   129.954  2.9101646e7\n   2 │ AAPL    2022-12-29T16:00:00  129.96   130.481  129.44   129.998  1.4058713e7\n   3 │ AAPL    2022-12-29T17:30:00  129.992  130.098  129.325  130.035  9.897737e6\n   4 │ AAPL    2022-12-29T19:00:00  130.035  130.24   129.7    129.95   9.552323e6\n   5 │ AAPL    2022-12-29T20:30:00  129.95   130.22   129.56   129.6    6.308537e6\n   6 │ AAPL    2022-12-29T21:00:00  129.61   129.61   129.61   129.61   0.0\n\n## Broadcasting\njulia> get_prices.([\"AAPL\",\"NFLX\"], range=\"1d\", interval=\"90m\")\n2-element Vector{OrderedDict{String, Union{String, Vector{DateTime}, Vector{Float64}}}}:\n OrderedDict{String, Union{String, Vector{DateTime}, Vector{Float64}}} with 7 entries:\n  \"ticker\"    => \"AAPL\"\n  \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")]\n  \"open\"      => [127.98999786376953, 129.9600067138672, 129.99240112304688, 130.03500366210938, 129.9499969482422, 129.61000061035156]\n  \"high\"      => [129.97999572753906, 130.4813995361328, 130.09829711914062, 130.24000549316406, 130.22000122070312, 129.61000061035156]\n  \"low\"       => [127.7300033569336, 129.44000244140625, 129.3249969482422, 129.6999969482422, 129.55999755859375, 129.61000061035156]\n  \"close\"     => [129.95419311523438, 129.99830627441406, 130.03500366210938, 129.9499969482422, 129.60000610351562, 129.61000061035156]\n  \"vol\"       => [2.9101646e7, 1.4058713e7, 9.897737e6, 9.552323e6, 6.308537e6, 0.0]\n OrderedDict{String, Union{String, Vector{DateTime}, Vector{Float64}}} with 7 entries:\n  \"ticker\"    => \"NFLX\"\n  \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")]\n  \"open\"      => [283.17999267578125, 289.5199890136719, 293.4200134277344, 290.05499267578125, 290.760009765625, 291.1199951171875]\n  \"high\"      => [291.8699951171875, 295.4999084472656, 293.5, 291.32000732421875, 292.3299865722656, 291.1199951171875]\n  \"low\"       => [281.010009765625, 289.489990234375, 289.5400085449219, 288.7699890136719, 290.5400085449219, 291.1199951171875]\n  \"close\"     => [289.5199890136719, 293.46990966796875, 290.04998779296875, 290.82000732421875, 291.1199951171875, 291.1199951171875]\n  \"vol\"       => [2.950791e6, 2.458057e6, 1.362915e6, 1.212217e6, 1.121821e6, 0.0]\n\n## Converting it to a DataFrame:\njulia> using DataFrames\njulia> data = get_prices.([\"AAPL\",\"NFLX\"], range=\"1d\", interval=\"90m\");\njulia> vcat([DataFrame(i) for i in data]...)\n12×7 DataFrame\n Row │ ticker  timestamp            open     high     low      close    vol       \n     │ String  DateTime             Float64  Float64  Float64  Float64  Float64   \n─────┼────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2022-12-29T14:30:00  127.99   129.98   127.73   129.954  2.9101646e7\n   2 │ AAPL    2022-12-29T16:00:00  129.96   130.481  129.44   129.998  1.4058713e7\n   3 │ AAPL    2022-12-29T17:30:00  129.992  130.098  129.325  130.035  9.897737e6\n   4 │ AAPL    2022-12-29T19:00:00  130.035  130.24   129.7    129.95   9.552323e6\n   5 │ AAPL    2022-12-29T20:30:00  129.95   130.22   129.56   129.6    6.308537e6\n   6 │ AAPL    2022-12-29T21:00:00  129.61   129.61   129.61   129.61   0.0\n   7 │ NFLX    2022-12-29T14:30:00  283.18   291.87   281.01   289.52   2.950791e6\n   8 │ NFLX    2022-12-29T16:00:00  289.52   295.5    289.49   293.47   2.458057e6\n   9 │ NFLX    2022-12-29T17:30:00  293.42   293.5    289.54   290.05   1.362915e6\n  10 │ NFLX    2022-12-29T19:00:00  290.055  291.32   288.77   290.82   1.212217e6\n  11 │ NFLX    2022-12-29T20:30:00  290.76   292.33   290.54   291.12   1.121821e6\n  12 │ NFLX    2022-12-29T21:00:00  291.12   291.12   291.12   291.12   0.0\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_quoteSummary-Tuple{String}","page":"All Functions","title":"YFinance.get_quoteSummary","text":"get_quoteSummary(symbol::String; item=nothing)\n\nRetrievs general information from Yahoo Finance stored in a JSON3 object.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem can either be a string or multiple items as a Vector of Strings. To see valid items call _QuoteSummary_Items (not all items are available for all types of securities)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty JSON3.Object is returned.\n\nExamples\n\njulia> get_quoteSummary(\"AAPL\")\n\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 31 entries:\n:assetProfile             => {…\n:recommendationTrend      => {…\n:cashflowStatementHistory => {…\n\n⋮                         => ⋮\njulia> get_quoteSummary(\"AAPL\",item = \"quoteType\")\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 13 entries:\n:exchange               => \"NMS\"\n:quoteType              => \"EQUITY\"\n:symbol                 => \"AAPL\"\n⋮                       => ⋮\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_recommendation_trend-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_recommendation_trend","text":"get_recommendation_trend(quoteSummary::JSON3.Object)\n\nRetrievs the recommendation trend from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_recommendation_trend\nOrderedDict{String, Vector} with 6 entries:\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"strongbuy\"  => [11, 11, 11, 13]\n  \"buy\"        => [21, 25, 26, 20]\n  \"hold\"       => [6, 6, 5, 8]\n  \"sell\"       => [0, 1, 1, 0]\n  \"strongsell\" => [0, 0, 0, 0]\n\njulia> get_recommendation_trend(\"AAPL\")\nOrderedDict{String, Vector} with 6 entries:\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"strongbuy\"  => [11, 11, 11, 13]\n  \"buy\"        => [21, 25, 26, 20]\n  \"hold\"       => [6, 6, 5, 8]\n  \"sell\"       => [0, 1, 1, 0]\n  \"strongsell\" => [0, 0, 0, 0]\n  \njulia> using DataFrames\njulia> get_recommendation_trend(\"AAPL\") |> DataFrame\n4×6 DataFrame\n Row │ period  strongbuy  buy    hold   sell   strongsell \n     │ String  Int64      Int64  Int64  Int64  Int64      \n─────┼────────────────────────────────────────────────────\n   1 │ 0m             11     21      6      0           0\n   2 │ -1m            11     25      6      1           0\n   3 │ -2m            11     26      5      1           0\n   4 │ -3m            13     20      8      0           0\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_sector_industry-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_sector_industry","text":"get_sector_industry(quoteSummary::JSON3.Object)\n\nRetrievs the Sector and Industry from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_sector_industry\nOrderedDict{String, String} with 2 entries:\n  \"sector\"   => \"Technology\"\n  \"industry\" => \"Consumer Electronics\"\n\njulia> get_sector_industry(\"AAPL\")\nOrderedDict{String, String} with 2 entries:\n  \"sector\"   => \"Technology\"\n  \"industry\" => \"Consumer Electronics\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_splits-Tuple{String}","page":"All Functions","title":"YFinance.get_splits","text":"get_splits(symbol::String; startdt::Union{Date,DateTime,AbstractString}=\"\", enddt::Union{Date,DateTime,AbstractString}=\"\", timeout::Int=10, throw_error::Bool=false, exchange_local_time::Bool=false)\n\nRetrieves stock split data from Yahoo Finance.\n\nArguments\n\nsymbol: A ticker (e.g., AAPL for Apple Inc., or ^GSPC for the S&P 500)\nstartdt and enddt: Optional. Can be of type Date, DateTime, or a String in the format \"yyyy-mm-dd\". If not provided, startdt defaults to the earliest available data and enddt to the current date.\ntimeout: Integer, defaults to 10. The timeout for the HTTP request in seconds.\nthrow_error: Boolean, defaults to false. If set to true, the function raises an error when the ticker is not valid or other issues occur. If false, a warning is given and an empty OrderedDict is returned.\nexchange_local_time: Boolean, defaults to false. If set to true, the timestamp corresponds to the exchange local time; otherwise, it's in GMT.\n\nReturns\n\nAn OrderedDict{String, Union{String,Vector{DateTime},Vector{Int},Vector{Float64}}} containing the requested split data.\n\nExamples\n\njulia> get_splits(\"AAPL\", startdt = \"2000-01-01\", enddt = \"2020-01-01\")\nOrderedDict{String, Union{String,Vector{DateTime},Vector{Int},Vector{Float64}}} with 5 entries:\n  \"ticker\"      => \"AAPL\"\n  \"timestamp\"   => [DateTime(\"2000-06-21T13:30:00\"), DateTime(\"2005-02-28T14:30:00\"), DateTime(\"2014-06-09T13:30:00\")]\n  \"numerator\"   => [2, 2, 7]\n  \"denominator\" => [1, 1, 1]\n  \"ratio\"       => [2.0, 2.0, 7.0]\n\n## Can be easily converted to a DataFrame\njulia> using DataFrames\njulia> get_splits(\"AAPL\", startdt = \"2000-01-01\", enddt = \"2020-01-01\") |> DataFrame\n3×5 DataFrame\n Row │ ticker  timestamp            numerator  denominator  ratio   \n     │ String  DateTime             Int64      Int64        Float64 \n─────┼──────────────────────────────────────────────────────────────\n   1 │ AAPL    2000-06-21T13:30:00          2            1      2.0\n   2 │ AAPL    2005-02-28T14:30:00          2            1      2.0\n   3 │ AAPL    2014-06-09T13:30:00          7            1      7.0\n\n## Broadcasting\njulia> get_splits.([\"AAPL\", \"F\"], startdt = \"2000-01-01\", enddt = \"2020-01-01\")\n2-element Vector{OrderedDict{String, Union{String,Vector{DateTime},Vector{Int},Vector{Float64}}}}:\n OrderedDict(\"ticker\" => \"AAPL\", \"timestamp\" => [DateTime(\"2000-06-21T13:30:00\"), DateTime(\"2005-02-28T14:30:00\"), DateTime(\"2014-06-09T13:30:00\")], \"numerator\" => [2, 2, 7], \"denominator\" => [1, 1, 1], \"ratio\" => [2.0, 2.0, 7.0])\n OrderedDict(\"ticker\" => \"F\", \"timestamp\" => [DateTime(\"2000-06-29T13:30:00\"), DateTime(\"2000-08-03T13:30:00\")], \"numerator\" => [10000, 1748175], \"denominator\" => [9607, 1000000], \"ratio\" => [1.0409076714895389, 1.748175])\n\n## Converting it to a DataFrame:\njulia> using DataFrames\njulia> data = get_splits.([\"AAPL\", \"F\"], startdt = \"2000-01-01\", enddt = \"2020-01-01\");\n\njulia> vcat([DataFrame(i) for i in data]...)\n5×5 DataFrame\n Row │ ticker  timestamp            numerator  denominator  ratio   \n     │ String  DateTime             Int64      Int64        Float64 \n─────┼──────────────────────────────────────────────────────────────\n   1 │ AAPL    2000-06-21T13:30:00          2            1  2.0\n   2 │ AAPL    2005-02-28T14:30:00          2            1  2.0\n   3 │ AAPL    2014-06-09T13:30:00          7            1  7.0\n   4 │ F       2000-06-29T13:30:00      10000         9607  1.04091\n   5 │ F       2000-08-03T13:30:00    1748175      1000000  1.74818\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_summary_detail-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_summary_detail","text":"get_summary_detail(quoteSummary::JSON3.Object)\n\nRetrievs the summaryDetail Item from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_summary_detail\nOrderedDict{String, Any} with 41 entries:\n  \"priceHint\"                  => 2\n  \"previousClose\"              => 126.04\n  \"open\"                       => 127.99\n  \"dayLow\"                     => 127.815\n  \"dayHigh\"                    => 130.48\n  \"regularMarketPreviousClose\" => 126.04\n  \"regularMarketOpen\"          => 127.99\n  \"regularMarketDayLow\"        => 127.815\n  \"regularMarketDayHigh\"       => 130.48\n  \"dividendRate\"               => 0.92\n  \"dividendYield\"              => 0.0073\n  \"exDividendDate\"             => 1667520000\n  \"payoutRatio\"                => 0.1473\n  \"fiveYearAvgDividendYield\"   => 0.99\n  \"beta\"                       => 1.21947\n  \"trailingPE\"                 => 21.2128\n  \"forwardPE\"                  => 19.1448\n  ⋮                            => ⋮\n\njulia> get_summary_detail(\"AAPL\")\nOrderedDict{String, Any} with 41 entries:\n  \"priceHint\"                  => 2\n  \"previousClose\"              => 126.04\n  \"open\"                       => 127.99\n  \"dayLow\"                     => 127.815\n  \"dayHigh\"                    => 130.48\n  \"regularMarketPreviousClose\" => 126.04\n  \"regularMarketOpen\"          => 127.99\n  \"regularMarketDayLow\"        => 127.815\n  \"regularMarketDayHigh\"       => 130.48\n  \"dividendRate\"               => 0.92\n  \"dividendYield\"              => 0.0073\n  \"exDividendDate\"             => 1667520000\n  \"payoutRatio\"                => 0.1473\n  \"fiveYearAvgDividendYield\"   => 0.99\n  \"beta\"                       => 1.21947\n  \"trailingPE\"                 => 21.2128\n  \"forwardPE\"                  => 19.1448\n  ⋮                            => ⋮\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_symbols-Tuple{String}","page":"All Functions","title":"YFinance.get_symbols","text":"get_symbols(search_term::String)\n\nAllows searches for specific securities.\n\nArguments\n\nsearch_term::String: Typically a company/security name (e.g. microsoft)\n\nReturns\n\nA YahooSearch <: AbstractArray containing YahooSearchItems containing the following fields: symbol::String, shortname::String, exchange::String, quoteType::String, sector::String, industry::String\n\nExample\n\njulia> get_symbols(\"micro\")\n7-element YahooSearch{YahooSearchItem, 1}:\n \nSymbol:  MGC=F\nName:    Micro Gold Futures,Jun-2023\nType:    FUTURE\nExch.:   New York Commodity Exchange (CMX)\n\n\nSymbol:  MSFT\nName:    Microsoft Corporation\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Software—Infrastructure\n\n\nSymbol:  AMD\nName:    Advanced Micro Devices, Inc.\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Semiconductors\n\n\nSymbol:  MU\nName:    Micron Technology, Inc.\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Semiconductors\n\n\nSymbol:  MSTR\nName:    MicroStrategy Incorporated\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Software—Application\n\n\nSymbol:  SMCI\nName:    Super Micro Computer, Inc.\nType:    EQUITY\nExch.:   NASDAQ (NMS)\nSec.:    Technology\nInd.:    Computer Hardware\n\n\nSymbol:  FNGU\nName:    MicroSectors FANG  Index 3X Lev\nType:    ETF\nExch.:   NYSEArca (PCX)\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_upgrade_downgrade_history-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_upgrade_downgrade_history","text":"get_upgrade_downgrade_history(quoteSummary::JSON3.Object)\n\nRetrievs the upgrade and downgrade history from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_upgrade_downgrade_history\nOrderedDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"JP Morgan\", \"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclays\", …  \n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-12-20T11:47:33\"), DateTime(\"2022…  \n  \"toGrade\"   => Union{Missing, String}[\"Overweight\", \"Buy\", \"Overweight\", \"Neutral\", \"Eq…  \n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"  …  \"\", \"\"…  \n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", \"main\", \"main\", \"…\n\njulia> get_upgrade_downgrade_history(\"AAPL\")\nOrderedDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"JP Morgan\", \"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclays\", …  \n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-12-20T11:47:33\"), DateTime(\"2022…  \n  \"toGrade\"   => Union{Missing, String}[\"Overweight\", \"Buy\", \"Overweight\", \"Neutral\", \"Eq…  \n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"  …  \"\", \"\"…  \n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", \"main\", \"main\", \"…\n  \njulia> using DataFrames\njulia> get_upgrade_downgrade_history(\"AAPL\") |> DataFrame\n872×5 DataFrame\n Row │ firm               date                 toGrade       fromGrade  action  \n     │ String             DateTime?            String?       String?    String? \n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ JP Morgan          2022-12-20T11:47:33  Overweight               main\n   2 │ UBS                2022-11-08T12:17:03  Buy                      main\n   3 │ Morgan Stanley     2022-11-08T12:14:23  Overweight               main\n   4 │ B of A Securities  2022-11-07T13:08:30  Neutral                  main\n   5 │ Barclays           2022-11-07T12:39:27  Equal-Weight             main\n   6 │ Wedbush            2022-10-28T13:19:17  Outperform               main\n   7 │ Credit Suisse      2022-10-28T11:59:30  Outperform               main\n  ⋮  │         ⋮                   ⋮                ⋮            ⋮         ⋮\n 867 │ Oxen Group         2012-03-14T15:25:00  Buy                      init\n 868 │ Canaccord Genuity  2012-03-14T08:21:00  Buy                      main\n 869 │ Morgan Stanley     2012-03-14T06:13:00  Overweight               main\n 870 │ Jefferies          2012-03-13T06:08:00  Buy                      main\n 871 │ FBN Securities     2012-03-08T07:33:00  Outperform               main\n 872 │ Canaccord Genuity  2012-02-09T08:17:00  Buy                      main\n                                                                859 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_valid_symbols-Tuple{AbstractString}","page":"All Functions","title":"YFinance.get_valid_symbols","text":"get_valid_symbols(symbol::AbstractString)\n\nTakes a symbol. If the symbol is valid it returns the symbol in a vector if not it returns and empy vector.\n\nArguments\n\nsmybol::AbstractString is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nExamples\n\njulia> get_valid_symbols(\"AAPL\")\n1-element Vector{String}:\n \"AAPL\"\n\njulia> get_valid_symbols(\"asdfs\")\n String[]\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_valid_symbols-Tuple{AbstractVector{<:AbstractString}}","page":"All Functions","title":"YFinance.get_valid_symbols","text":"get_valid_symbols(symbol::AbstractVector{<:AbstractString})\n\nTakes a AbstractVector of symbols and returns only the valid ones.\n\nArguments\n\nsmybol::AbstractVector{<:AbstractString} is a vector of tickers (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nExamples\n\njulia> get_valid_symbols(\"AAPL\",\"AMD\",\"asdfs\")\n2-element Vector{String}:\n \"AAPL\"\n \"AMD\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.links-Tuple{YahooNews}","page":"All Functions","title":"YFinance.links","text":"links(x::YahooNews)\n\nReturns the links of all NewsItems in a Vector\n\nArugments:\n\nx::YahooNews\n\nReturns:\n\nVector{String}\n\nExample:\n\njulia> x = search_news(\"MSFT\");\n\njulia> links(x)\n8-element Vector{String}:\n \"https://finance.yahoo.com/news/\" ⋯ 20 bytes ⋯ \"itter-ad-program-221121298.html\"\n \"https://finance.yahoo.com/m/06a\" ⋯ 37 bytes ⋯ \"chatbots-guzzle-water.-how.html\"\n \"https://finance.yahoo.com/m/65b\" ⋯ 36 bytes ⋯ \"st-dow-jones-stocks-to-buy.html\"\n \"https://finance.yahoo.com/m/9c4\" ⋯ 35 bytes ⋯ \"op-companies-for-financial.html\"\n \"https://finance.yahoo.com/m/ebf\" ⋯ 35 bytes ⋯ \"ideo%3A-your-top-questions.html\"\n \"https://finance.yahoo.com/news/board-oks-microsoft-data-center-163630944.html\"\n \"https://finance.yahoo.com/news/\" ⋯ 20 bytes ⋯ \"-workplace-where-155427039.html\"\n \"https://finance.yahoo.com/news/microsoft-working-space-time-add-150000132.html\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.search_news-Tuple{String}","page":"All Functions","title":"YFinance.search_news","text":"search_news(str::String;lang=\"en-us\")\n\nReturns news related to the seach string str.\n\nArugments:\n\nstr::String: The search string. It is usually a symbol.\nlang::String: The search language and region. The region is automatically set according to the language. Supported languages are: \"en-us\", \"en-ca\", \"en-gb\", \"en-au\", \"en-nz\", \"en-SG\", \"en-in\", \"de\", \"es\", \"fr\", \"it\", \"pt-br\", \"zh\", and \"zh-tw\".\n\nReturns:\n\nYahooNews <: AbstractArray that contains  NewsItems with fields: title::String, publisher::String, link::String, timestamp::DateTime, symbols::Array{String,1}\n\nExample:\n\njulia> search_news(\"MSFT\")\n8-element YahooNews{NewsItem, 1}:\n Title:          Microsoft Removes Twitter From Ad Program; Musk Threatens Suit\nTimestamp:       Apr 19 22:11 PM\nPublisher:       Bloomberg\nLink:            https://finance.yahoo.com/news/microsoft-removes-twitter-ad-program-221121298.html\nSymbols:         MSFT\n\n Title:          AI ChatBots Guzzle Water. How and Why It’s a Problem.\nTimestamp:       Apr 19 20:33 PM\nPublisher:       Barrons.com\nLink:            https://finance.yahoo.com/m/06a973de-215d-3928-9c99-00867b512966/ai-chatbots-guzzle-water.-how.html\nSymbols:         GOOGL, MSFT\n\n Title:          Best Dow Jones Stocks To Buy And Watch In April: Travelers Surges On Earnings\nTimestamp:       Apr 19 18:06 PM\nPublisher:       Investor's Business Daily\nLink:            https://finance.yahoo.com/m/65b53896-faf4-3a06-9d0d-a63cf3c83192/best-dow-jones-stocks-to-buy.html\nSymbols:         ^DJI, MSFT\n\n Title:          Top Companies for Financial Strength\nTimestamp:       Apr 19 18:03 PM\nPublisher:       The Wall Street Journal\nLink:            https://finance.yahoo.com/m/9c4f6782-7ce7-3e1e-8d0a-ff7f41bc5ef7/top-companies-for-financial.html\nSymbols:         XOM, MSFT, AAPL, NUE, MRNA\n\n Title:          VIDEO: Your Top Questions Answered on the Debt Ceiling and Portfolio Management\nTimestamp:       Apr 19 16:46 PM\nPublisher:       TheStreet.com\nLink:            https://finance.yahoo.com/m/ebf41ba6-6cbc-38ce-93c5-bcee152080e7/video%3A-your-top-questions.html\nSymbols:         CHPT, MSFT\n\n Title:          Microsoft agrees to buy 50m Foxconn parcel in Wisconsin\nTimestamp:       Apr 19 16:36 PM\nPublisher:       AP Finance\nLink:            https://finance.yahoo.com/news/board-oks-microsoft-data-center-163630944.html\nSymbols:         MSFT\n\n Title:          LinkedIn Reveals Top Workplace: Where Amazon and Netflix Rank For Happy Employees\nTimestamp:       Apr 19 15:54 PM\nPublisher:       Benzinga\nLink:            https://finance.yahoo.com/news/linkedin-reveals-top-workplace-where-155427039.html\nSymbols:         AMZN, GOOGL, MSFT, NFLX, WFC\n\n Title:          Microsoft Working With Space and Time to Add Real-Time Blockchain Data for Azure Cloud\nTimestamp:       Apr 19 15:00 PM\nPublisher:       CoinDesk\nLink:            https://finance.yahoo.com/news/microsoft-working-space-time-add-150000132.html\nSymbols:         MSFT\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.sink_prices_to-Tuple{Type{OrderedDict}, OrderedDict{String, Union{Vector{Float64}, Vector{DateTime}, String}}}","page":"All Functions","title":"YFinance.sink_prices_to","text":"sink_prices_to(::Type{OrderedDict},x::OrderedDict{String,Any})\n\nConverts an exisitng OrderedDict output from get_prices to an OrderedDict If TimeSeries.jl or TSFrames.jl are loaded this function is extended to allow sinking into these types.\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.timestamps-Tuple{YahooNews}","page":"All Functions","title":"YFinance.timestamps","text":"timestamps(x::YahooNews)\n\nReturns the timestamp of all NewsItems in a Vector\n\nArugments:\n\nx::YahooNews\n\nReturns:\n\nVector{DateTime}\n\nExample:\n\njulia> x = search_news(\"MSFT\");\n\njulia> timestamps(x)\n8-element Vector{Dates.DateTime}:\n 2023-04-19T22:11:21\n 2023-04-19T20:33:00\n 2023-04-19T18:06:33\n 2023-04-19T18:03:00\n 2023-04-19T16:46:00\n 2023-04-19T16:36:30\n 2023-04-19T15:54:27\n 2023-04-19T15:00:00\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.titles-Tuple{YahooNews}","page":"All Functions","title":"YFinance.titles","text":"titles(x::YahooNews)\n\nReturns the titles of all NewsItems in a Vector\n\nArugments:\n\nx::YahooNews\n\nReturns:\n\nVector{String}\n\nExample:\n\njulia> x = search_news(\"MSFT\");\n\njulia> titles(x)\n8-element Vector{String}:\n \"Microsoft Removes Twitter From Ad Program; Musk Threatens Suit\"\n \"AI ChatBots Guzzle Water. How and Why It s a Problem.\"\n \"Best Dow Jones Stocks To Buy And Watch In April: Travelers Surges On Earnings\"\n \"Top Companies for Financial Strength\"\n \"VIDEO: Your Top Questions Answe\" ⋯ 17 bytes ⋯ \"eiling and Portfolio Management\"\n \"Microsoft agrees to buy 50m Foxconn parcel in Wisconsin\"\n \"LinkedIn Reveals Top Workplace:\" ⋯ 19 bytes ⋯ \"etflix Rank For Happy Employees\"\n \"Microsoft Working With Space an\" ⋯ 24 bytes ⋯ \"Blockchain Data for Azure Cloud\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.validate_symbol-Tuple{AbstractString}","page":"All Functions","title":"YFinance.validate_symbol","text":"validate_symbol(symbol::AbstractString)\n\nValidates a Symbol (Ticker). Returns true if the ticker is valid and false if the ticker is not valid.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nHow it works\n\nChecks if the HTTP request works (status 200) or whether the request errors (common status in this case: 404)    \n\n\n\n\n\n","category":"method"},{"location":"News Search/#Search-for-News","page":"Get News","title":"Search for News","text":"","category":"section"},{"location":"News Search/","page":"Get News","title":"Get News","text":"Allows for the search of relevant news to the search term. The search term is typically a symbol (ticker) but can also be a company name (or parts of a company name).","category":"page"},{"location":"News Search/#Structs:","page":"Get News","title":"Structs:","text":"","category":"section"},{"location":"News Search/","page":"Get News","title":"Get News","text":"The structs returned by search_news","category":"page"},{"location":"News Search/#YahooNews","page":"Get News","title":"YahooNews","text":"","category":"section"},{"location":"News Search/","page":"Get News","title":"Get News","text":"Basically a custom Array of NewsItems returned by search_news","category":"page"},{"location":"News Search/","page":"Get News","title":"Get News","text":"mutable struct YahooNews{NewsItem,N} <: AbstractArray{NewsItem,N}\n    arr::Array{NewsItem,N}\nend","category":"page"},{"location":"News Search/#NewsItem","page":"Get News","title":"NewsItem","text":"","category":"section"},{"location":"News Search/","page":"Get News","title":"Get News","text":"Is an individual news item contained in YahooNews contains the following fields:","category":"page"},{"location":"News Search/","page":"Get News","title":"Get News","text":"title: Title of the news article\npublisher: Publisher of the news \nlink: The link to the news article\ntimestamp: The timestamp of the time when the news was published (DateTime)\nsymbols: An array of the tickers related to the news item","category":"page"},{"location":"News Search/","page":"Get News","title":"Get News","text":"mutable struct NewsItem\n    title::String\n    publisher::String\n    link::String\n    timestamp::DateTime\n    symbols::Vector{String}\nend","category":"page"},{"location":"News Search/#Convenience-Functions","page":"Get News","title":"Convenience Functions","text":"","category":"section"},{"location":"News Search/","page":"Get News","title":"Get News","text":"Allows of accessing all titles, links, and timestamps stored in arrays directly from the YahooNews item. ","category":"page"},{"location":"News Search/","page":"Get News","title":"Get News","text":"titles\nlinks\ntimestamps","category":"page"},{"location":"News Search/#YFinance.titles","page":"Get News","title":"YFinance.titles","text":"titles(x::YahooNews)\n\nReturns the titles of all NewsItems in a Vector\n\nArugments:\n\nx::YahooNews\n\nReturns:\n\nVector{String}\n\nExample:\n\njulia> x = search_news(\"MSFT\");\n\njulia> titles(x)\n8-element Vector{String}:\n \"Microsoft Removes Twitter From Ad Program; Musk Threatens Suit\"\n \"AI ChatBots Guzzle Water. How and Why It s a Problem.\"\n \"Best Dow Jones Stocks To Buy And Watch In April: Travelers Surges On Earnings\"\n \"Top Companies for Financial Strength\"\n \"VIDEO: Your Top Questions Answe\" ⋯ 17 bytes ⋯ \"eiling and Portfolio Management\"\n \"Microsoft agrees to buy 50m Foxconn parcel in Wisconsin\"\n \"LinkedIn Reveals Top Workplace:\" ⋯ 19 bytes ⋯ \"etflix Rank For Happy Employees\"\n \"Microsoft Working With Space an\" ⋯ 24 bytes ⋯ \"Blockchain Data for Azure Cloud\"\n\n\n\n\n\n","category":"function"},{"location":"News Search/#YFinance.links","page":"Get News","title":"YFinance.links","text":"links(x::YahooNews)\n\nReturns the links of all NewsItems in a Vector\n\nArugments:\n\nx::YahooNews\n\nReturns:\n\nVector{String}\n\nExample:\n\njulia> x = search_news(\"MSFT\");\n\njulia> links(x)\n8-element Vector{String}:\n \"https://finance.yahoo.com/news/\" ⋯ 20 bytes ⋯ \"itter-ad-program-221121298.html\"\n \"https://finance.yahoo.com/m/06a\" ⋯ 37 bytes ⋯ \"chatbots-guzzle-water.-how.html\"\n \"https://finance.yahoo.com/m/65b\" ⋯ 36 bytes ⋯ \"st-dow-jones-stocks-to-buy.html\"\n \"https://finance.yahoo.com/m/9c4\" ⋯ 35 bytes ⋯ \"op-companies-for-financial.html\"\n \"https://finance.yahoo.com/m/ebf\" ⋯ 35 bytes ⋯ \"ideo%3A-your-top-questions.html\"\n \"https://finance.yahoo.com/news/board-oks-microsoft-data-center-163630944.html\"\n \"https://finance.yahoo.com/news/\" ⋯ 20 bytes ⋯ \"-workplace-where-155427039.html\"\n \"https://finance.yahoo.com/news/microsoft-working-space-time-add-150000132.html\"\n\n\n\n\n\n","category":"function"},{"location":"News Search/#YFinance.timestamps","page":"Get News","title":"YFinance.timestamps","text":"timestamps(x::YahooNews)\n\nReturns the timestamp of all NewsItems in a Vector\n\nArugments:\n\nx::YahooNews\n\nReturns:\n\nVector{DateTime}\n\nExample:\n\njulia> x = search_news(\"MSFT\");\n\njulia> timestamps(x)\n8-element Vector{Dates.DateTime}:\n 2023-04-19T22:11:21\n 2023-04-19T20:33:00\n 2023-04-19T18:06:33\n 2023-04-19T18:03:00\n 2023-04-19T16:46:00\n 2023-04-19T16:36:30\n 2023-04-19T15:54:27\n 2023-04-19T15:00:00\n\n\n\n\n\n","category":"function"},{"location":"News Search/#News-Search-Function","page":"Get News","title":"News Search Function","text":"","category":"section"},{"location":"News Search/","page":"Get News","title":"Get News","text":"search_news","category":"page"},{"location":"News Search/#YFinance.search_news","page":"Get News","title":"YFinance.search_news","text":"search_news(str::String;lang=\"en-us\")\n\nReturns news related to the seach string str.\n\nArugments:\n\nstr::String: The search string. It is usually a symbol.\nlang::String: The search language and region. The region is automatically set according to the language. Supported languages are: \"en-us\", \"en-ca\", \"en-gb\", \"en-au\", \"en-nz\", \"en-SG\", \"en-in\", \"de\", \"es\", \"fr\", \"it\", \"pt-br\", \"zh\", and \"zh-tw\".\n\nReturns:\n\nYahooNews <: AbstractArray that contains  NewsItems with fields: title::String, publisher::String, link::String, timestamp::DateTime, symbols::Array{String,1}\n\nExample:\n\njulia> search_news(\"MSFT\")\n8-element YahooNews{NewsItem, 1}:\n Title:          Microsoft Removes Twitter From Ad Program; Musk Threatens Suit\nTimestamp:       Apr 19 22:11 PM\nPublisher:       Bloomberg\nLink:            https://finance.yahoo.com/news/microsoft-removes-twitter-ad-program-221121298.html\nSymbols:         MSFT\n\n Title:          AI ChatBots Guzzle Water. How and Why It’s a Problem.\nTimestamp:       Apr 19 20:33 PM\nPublisher:       Barrons.com\nLink:            https://finance.yahoo.com/m/06a973de-215d-3928-9c99-00867b512966/ai-chatbots-guzzle-water.-how.html\nSymbols:         GOOGL, MSFT\n\n Title:          Best Dow Jones Stocks To Buy And Watch In April: Travelers Surges On Earnings\nTimestamp:       Apr 19 18:06 PM\nPublisher:       Investor's Business Daily\nLink:            https://finance.yahoo.com/m/65b53896-faf4-3a06-9d0d-a63cf3c83192/best-dow-jones-stocks-to-buy.html\nSymbols:         ^DJI, MSFT\n\n Title:          Top Companies for Financial Strength\nTimestamp:       Apr 19 18:03 PM\nPublisher:       The Wall Street Journal\nLink:            https://finance.yahoo.com/m/9c4f6782-7ce7-3e1e-8d0a-ff7f41bc5ef7/top-companies-for-financial.html\nSymbols:         XOM, MSFT, AAPL, NUE, MRNA\n\n Title:          VIDEO: Your Top Questions Answered on the Debt Ceiling and Portfolio Management\nTimestamp:       Apr 19 16:46 PM\nPublisher:       TheStreet.com\nLink:            https://finance.yahoo.com/m/ebf41ba6-6cbc-38ce-93c5-bcee152080e7/video%3A-your-top-questions.html\nSymbols:         CHPT, MSFT\n\n Title:          Microsoft agrees to buy 50m Foxconn parcel in Wisconsin\nTimestamp:       Apr 19 16:36 PM\nPublisher:       AP Finance\nLink:            https://finance.yahoo.com/news/board-oks-microsoft-data-center-163630944.html\nSymbols:         MSFT\n\n Title:          LinkedIn Reveals Top Workplace: Where Amazon and Netflix Rank For Happy Employees\nTimestamp:       Apr 19 15:54 PM\nPublisher:       Benzinga\nLink:            https://finance.yahoo.com/news/linkedin-reveals-top-workplace-where-155427039.html\nSymbols:         AMZN, GOOGL, MSFT, NFLX, WFC\n\n Title:          Microsoft Working With Space and Time to Add Real-Time Blockchain Data for Azure Cloud\nTimestamp:       Apr 19 15:00 PM\nPublisher:       CoinDesk\nLink:            https://finance.yahoo.com/news/microsoft-working-space-time-add-150000132.html\nSymbols:         MSFT\n\n\n\n\n\n","category":"function"},{"location":"Fundamental/#Download-Fundamental-Data","page":"Fundamental","title":"Download Fundamental Data","text":"","category":"section"},{"location":"Fundamental/","page":"Fundamental","title":"Fundamental","text":"get_Fundamental","category":"page"},{"location":"Fundamental/#YFinance.get_Fundamental","page":"Fundamental","title":"YFinance.get_Fundamental","text":"get_Fundamental(symbol::AbstractString, item::AbstractString,interval::AbstractString, startdt, enddt)\n\nRetrievs financial statement information from Yahoo Finance stored in a OrderedCollections.OrderedDict.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem::String can either be an entire financial statement or a subitem. Entire financial statements:\"income_statement\", \"valuation\", \"cash_flow\", \"balance_sheet\". To see valid sub items grouped by financial statement type in a OrderedCollections.OrderedDict call _Fundamental_Types  \ninterval::String can be one of \"annual\", \"quarterly\", \"monthly\"  \nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_Fundamental(\"NFLX\", \"income_statement\",\"quarterly\",\"2000-01-01\",\"2022-12-31\")\nOrderedDict{String, Any} with 40 entries:\n  \"timestamp\"                       => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-0…  \"GeneralAndAdministrativeExpense\" => Any[397790000, 397928000, 409297000, 373213000]    \n  \"SellingGeneralAndAdministration\" => Any[1190503000, 953906000, 984257000, 941167000]   \n  \"InterestIncome\"                  => Any[108512000, 195645000, 220226000, 261404000]    \n  \"OperatingRevenue\"                => Any[7709318000, 7867767000, 7970141000, 7925589000]  \"DilutedNIAvailtoComStockholders\" => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"NormalizedIncome\"                => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"NetIncomeCommonStockholders\"     => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"BasicAverageShares\"              => Any[443462000, 444146000, 444557000, 444878000]    \n  ⋮                                 => ⋮\n\n\njulia> using DataFrames\njulia> get_Fundamental(\"AAPL\", \"InterestExpense\",\"quarterly\",\"2000-01-01\",\"2022-12-31\") |> DataFrame\n4×2 DataFrame\n Row │ timestamp            InterestExpense \n     │ DateTime             Any\n─────┼──────────────────────────────────────\n   1 │ 2021-12-31T00:00:00  694000000\n   2 │ 2022-03-31T00:00:00  691000000\n   3 │ 2022-06-30T00:00:00  719000000\n   4 │ 2022-09-30T00:00:00  827000000\n\n\n\n\n\n","category":"function"},{"location":"Proxies/#HTTP-Proxy-Settings","page":"Proxy","title":"HTTP Proxy Settings","text":"","category":"section"},{"location":"Proxies/","page":"Proxy","title":"Proxy","text":"Proxy settings are stored in the global variable PROXYSETTINGS","category":"page"},{"location":"Proxies/","page":"Proxy","title":"Proxy","text":"create_proxy_settings\nclear_proxy_settings","category":"page"},{"location":"Proxies/#YFinance.create_proxy_settings","page":"Proxy","title":"YFinance.create_proxy_settings","text":"create_proxy_settings(p::AbstractString,user=nothing,password=nothing)\n\nSets the global proxy variable _PROXY_SETTINGS::NamedTuple. This NamedTuple contains a proxy and a auth field. These fields default to nothing and and empty Dict respectively.\n\nArguments\n\np::String (Required) of the form: \"http://proxy.xyz.com:8080\"\nuser::String Username (optional) only required if proxy requires authentication. Defaults to nothing (no authentication needed)\npassword::String The password corresponding to the Username. Defaults to nothing (no authentication needed) \n\n\n\n\n\n","category":"function"},{"location":"Proxies/#YFinance.clear_proxy_settings","page":"Proxy","title":"YFinance.clear_proxy_settings","text":"clear_proxy_settings()\n\nClears the proxy settings by setting them back to their default (no proxy configuration).    \n\n\n\n\n\n","category":"function"},{"location":"#YFinance.jl","page":"Home","title":"YFinance.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GitHub Repo: https://github.com/eohne/YFinance.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Download price, fundamental, and option data from Yahoo Finance   This is a side project and my first package so do not expect too much. ","category":"page"},{"location":"#***-LEGAL-DISCLAIMER-***","page":"Home","title":"*** LEGAL DISCLAIMER ***","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Yahoo!, Y!Finance, and Yahoo! finance are registered trademarks of Yahoo, Inc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"YFinance.jl is not endorsed or in anyway affiliated with Yahoo, Inc. The data retreived can only be used for personal use.  Please see Yahoo's terms of use to ensure that you can use the data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Yahoo Developer API Terms of Use\nYahoo Terms of Service\nYahoo Terms","category":"page"},{"location":"#***-No-decryption-issues-***","page":"Home","title":"*** No decryption issues ***","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The implementation of YFinance.jl is similar to the python package yahooquery in that it accesses data through API endpoints. Therefore, YFinance.jl does not experience the same decryption issues that python’s yfinance faces at the moment.","category":"page"},{"location":"#What-you-can-download","page":"Home","title":"What you can download","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Price data (including intraday)\nFundamental data\nOption Data\nESG Data\nquoteSummary data (this is a JSON3.object that contains a multitude of different information)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is registered in the General registry","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can install the YFinance package by entering the package manager and typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add YFinance ","category":"page"},{"location":"","page":"Home","title":"Home","text":"You could also install the package by first calling using Pkg:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"YFinance\") ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To load the package simply type the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using YFinance","category":"page"},{"location":"#Precompilation-across-different-versions","page":"Home","title":"Precompilation across different versions","text":"","category":"section"},{"location":"#Version-0.1.10","page":"Home","title":"Version 0.1.10","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Precompiles only the response processing part of the get_prices function and not the HTTP request. Most of the compilation time lies unfortunately with the request itself.   To Install this version enter the package mode by entering ] in the REPL and run the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"  (@v1.10) pkg> add YFinance","category":"page"},{"location":"#Version-0.1.9","page":"Home","title":"Version 0.1.9","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Does not precompile.   To Install this version enter the package mode by entering ] in the REPL and run the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"  (@v1.10) pkg> add YFinance @v0.1.9","category":"page"},{"location":"#Version-0.1.8","page":"Home","title":"Version 0.1.8","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Precompilation of the get_prices function. This has caused precompilation hangs for Julia 1.10 and 1.11 - package typically still precompiles but takes long and gives warnings. One user at least has reported errors. Note precompilation also does not work if you require to set a proxy to access the internet. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To Install this version enter the package mode by entering ] in the REPL and run the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.10) pkg> add YFinance @v0.1.8","category":"page"}]
}
